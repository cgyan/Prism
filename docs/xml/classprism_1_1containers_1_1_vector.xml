<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classprism_1_1containers_1_1_vector" kind="class" language="C++" prot="public">
    <compoundname>prism::containers::Vector</compoundname>
    <includes refid="_vector_8h" local="no">Vector.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_random_access_iterator" kindref="compound">RandomAccessIterator</ref>&lt; T &gt;</type>
        <definition>typedef RandomAccessIterator&lt;T&gt; prism::containers::Vector&lt; T &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="49" column="1" bodyfile="inc/containers/Vector.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_random_access_const_iterator" kindref="compound">RandomAccessConstIterator</ref>&lt; T &gt;</type>
        <definition>typedef RandomAccessConstIterator&lt;T&gt; prism::containers::Vector&lt; T &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="50" column="1" bodyfile="inc/containers/Vector.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1a557fd3cca76315ccd4112d8b7398e43c" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_forward_iterator_1a4e3141e23f97c87d787c42e5e25cfdf8" kindref="member">iterator::reference</ref></type>
        <definition>typedef iterator::reference prism::containers::Vector&lt; T &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="51" column="1" bodyfile="inc/containers/Vector.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1a9950012c32498b47e38c98f2ce9fe048" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_forward_const_iterator_1a9580e2fada8484b568a7fc3e104dbf1e" kindref="member">const_iterator::reference</ref></type>
        <definition>typedef const_iterator::reference prism::containers::Vector&lt; T &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="52" column="1" bodyfile="inc/containers/Vector.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1a7205d98d3099bffc475e77acf7c8e2a1" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_forward_iterator_1ad4bc81f412acc7a2d12e592078ed51aa" kindref="member">iterator::pointer</ref></type>
        <definition>typedef iterator::pointer prism::containers::Vector&lt; T &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="53" column="1" bodyfile="inc/containers/Vector.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1a1a5e05e74505807405e07550f8c1c5ad" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_forward_const_iterator_1a947740c6995919fd5e772a553dda7735" kindref="member">const_iterator::pointer</ref></type>
        <definition>typedef const_iterator::pointer prism::containers::Vector&lt; T &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="54" column="1" bodyfile="inc/containers/Vector.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1a81b3c7a63deb9dedb3b3dd84977c6cca" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_forward_iterator_1a1543170bc355e16a500f376e748f3031" kindref="member">iterator::value_type</ref></type>
        <definition>typedef iterator::value_type prism::containers::Vector&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="55" column="1" bodyfile="inc/containers/Vector.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1af003b53eb746fe1f294136b6d3384b18" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_forward_iterator_1a79680986bd39e3c2f0ab1e008b1150e5" kindref="member">iterator::difference_type</ref></type>
        <definition>typedef iterator::difference_type prism::containers::Vector&lt; T &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="56" column="1" bodyfile="inc/containers/Vector.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_vector_1ad8f479032fe710d3bdf041929ee6f123" prot="public" static="no">
        <type>int</type>
        <definition>typedef int prism::containers::Vector&lt; T &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="57" column="1" bodyfile="inc/containers/Vector.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classprism_1_1containers_1_1_vector_1aec0a323d2112fb65d26034af98ca83ac" prot="private" static="no" mutable="no">
        <type><ref refid="structprism_1_1containers_1_1_vector_data" kindref="compound">VectorData</ref>&lt; T &gt; *</type>
        <definition>VectorData&lt;T&gt;* prism::containers::Vector&lt; T &gt;::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="142" column="1" bodyfile="inc/containers/Vector.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aa2af3bb48d3a7cd783dff0270307a45e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Vector&lt; T &gt;::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an empty vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="59" column="1" bodyfile="inc/containers/Vector.h" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a8fd8f2944888a71c1e6e9ae0bbf890a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(const int size, const T &amp;value=T())</argsstring>
        <name>Vector</name>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a vector containing <emphasis>size</emphasis> elements setting each value to its default constructed value i.e. T() if a value is provided. If a value is provided then each element is set to <emphasis>value</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="60" column="1" bodyfile="inc/containers/Vector.h" bodystart="160" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aa3e11fefca796cb11588eb32bb6a89c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;copy)</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy-constructs a new vector that will contain all of the elemenst from <emphasis>copy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="61" column="1" bodyfile="inc/containers/Vector.h" bodystart="169" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a58e4ef79be6d926803af6a47c61e4b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Vector&lt; T &gt;::~Vector</definition>
        <argsstring>()</argsstring>
        <name>~Vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys this vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="62" column="1" bodyfile="inc/containers/Vector.h" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a924f518701e9c8ac5bf5e72684c7d544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::append</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> to the end of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="63" column="1" bodyfile="inc/containers/Vector.h" bodystart="192" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ab6604abf1fa5021c44fa4da3fe6e916f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Vector&lt; T &gt;::at</definition>
        <argsstring>(const int index)</argsstring>
        <name>at</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at <emphasis>index</emphasis>. <emphasis>index</emphasis> must be 0&lt;=index&lt;<ref refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" kindref="member">size()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="64" column="1" bodyfile="inc/containers/Vector.h" bodystart="202" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a2046a7661e670f12309ad6e988c9169e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Vector&lt; T &gt;::at</definition>
        <argsstring>(const int index) const </argsstring>
        <name>at</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at <emphasis>index</emphasis>. <emphasis>index</emphasis> must be 0&lt;=index&lt;<ref refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" kindref="member">size()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="65" column="1" bodyfile="inc/containers/Vector.h" bodystart="215" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aad61ba2bc825e9a5b98c00279884faf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a557fd3cca76315ccd4112d8b7398e43c" kindref="member">reference</ref></type>
        <definition>Vector&lt; T &gt;::reference prism::containers::Vector&lt; T &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="66" column="1" bodyfile="inc/containers/Vector.h" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aec8c8e8c4dba5430d65ce2b050fa43ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a9950012c32498b47e38c98f2ce9fe048" kindref="member">const_reference</ref></type>
        <definition>Vector&lt; T &gt;::const_reference prism::containers::Vector&lt; T &gt;::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="67" column="1" bodyfile="inc/containers/Vector.h" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a8a146dbfe2c2d67e9a33383e59b8ace0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
        <definition>Vector&lt; T &gt;::iterator prism::containers::Vector&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator that points to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="68" column="1" bodyfile="inc/containers/Vector.h" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a4310ee10517b621aaec41ac83cc66bb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" kindref="member">const_iterator</ref></type>
        <definition>Vector&lt; T &gt;::const_iterator prism::containers::Vector&lt; T &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator that points to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="69" column="1" bodyfile="inc/containers/Vector.h" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a905b16131b216695f71172206215c8f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Vector&lt; T &gt;::capacity</definition>
        <argsstring>() const </argsstring>
        <name>capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the capacity of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="70" column="1" bodyfile="inc/containers/Vector.h" bodystart="258" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ae237687c1dc7aca2868fa1395b6549ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" kindref="member">const_iterator</ref></type>
        <definition>Vector&lt; T &gt;::const_iterator prism::containers::Vector&lt; T &gt;::cbegin</definition>
        <argsstring>() const </argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator that points to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="71" column="1" bodyfile="inc/containers/Vector.h" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a09a061933b3d0946e9c25ad87e6b242a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" kindref="member">const_iterator</ref></type>
        <definition>Vector&lt; T &gt;::const_iterator prism::containers::Vector&lt; T &gt;::cend</definition>
        <argsstring>() const </argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator that points to the imaginary element one after the last value in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="72" column="1" bodyfile="inc/containers/Vector.h" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1abf853c583423758c8ee9ec27fc1c210b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all elements from the vector leaving a size of 0. The capacity however remains unchanged although can shrunk using <ref refid="classprism_1_1containers_1_1_vector_1a3ae1c45819282708f4200bf2a56b6384" kindref="member">squeeze()</ref> if required. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="73" column="1" bodyfile="inc/containers/Vector.h" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1addbf80b5fc2fad2e4e85beabfd92afd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" kindref="member">const_iterator</ref></type>
        <definition>Vector&lt; T &gt;::const_iterator prism::containers::Vector&lt; T &gt;::constBegin</definition>
        <argsstring>() const </argsstring>
        <name>constBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator that points to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="74" column="1" bodyfile="inc/containers/Vector.h" bodystart="291" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a2f38f1c1ea22186590873a799364becf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * prism::containers::Vector&lt; T &gt;::constData</definition>
        <argsstring>() const </argsstring>
        <name>constData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const pointer to the underlying array data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="75" column="1" bodyfile="inc/containers/Vector.h" bodystart="299" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a1cebbe63705c688ec354119dd47b9e6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" kindref="member">const_iterator</ref></type>
        <definition>Vector&lt; T &gt;::const_iterator prism::containers::Vector&lt; T &gt;::constEnd</definition>
        <argsstring>() const </argsstring>
        <name>constEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator that points to the imaginary element one after the last value in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="76" column="1" bodyfile="inc/containers/Vector.h" bodystart="307" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a80fd2ca147e135b02b11a28f4edc2a0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::contains</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>contains</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the vector contains one or more occurrences of <emphasis>value</emphasis> and false otherwise. The vector&apos;s value type must support <ref refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="77" column="1" bodyfile="inc/containers/Vector.h" bodystart="316" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1af6eed18f3336ec579c89d64819e0cb74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Vector&lt; T &gt;::count</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>count</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts and returns the number of occurrences of /em value in the vector. The vector&apos;s value type must support <ref refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="78" column="1" bodyfile="inc/containers/Vector.h" bodystart="329" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1acbc6ec2533f7853cf6ce5b8d0cc84d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T * prism::containers::Vector&lt; T &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the underlying array data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="79" column="1" bodyfile="inc/containers/Vector.h" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aa46fe53854caefbeae5e29f254c1657d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * prism::containers::Vector&lt; T &gt;::data</definition>
        <argsstring>() const </argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const pointer to the underlying array data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="80" column="1" bodyfile="inc/containers/Vector.h" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a80e3ca5a538da5e15a4773173c820518" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this vector contains no elements i.e. size of 0 and false otherwise. Equivalent to <ref refid="classprism_1_1containers_1_1_vector_1a2e4cd951704795ea090181341999ce71" kindref="member">isEmpty()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="81" column="1" bodyfile="inc/containers/Vector.h" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1af70c02efa2acea9da2ea192ba83e6edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
        <definition>Vector&lt; T &gt;::iterator prism::containers::Vector&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the imaginary element one position after the last value in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="82" column="1" bodyfile="inc/containers/Vector.h" bodystart="367" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ae2362e0b909620a7aad33bd659ef23a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" kindref="member">const_iterator</ref></type>
        <definition>Vector&lt; T &gt;::const_iterator prism::containers::Vector&lt; T &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the imaginary element one position after the last value in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="83" column="1" bodyfile="inc/containers/Vector.h" bodystart="375" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ab4a8fa582eaf960a6bbc4a71391c32e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::endsWith</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>endsWith</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the vector is not empty and its last element is equal to <emphasis>value</emphasis> and false otherwise. The vector&apos;s value type must support <ref refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="84" column="1" bodyfile="inc/containers/Vector.h" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ac1c4b5ddafc74736193b9c7fd7598447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
        <definition>Vector&lt; T &gt;::iterator prism::containers::Vector&lt; T &gt;::erase</definition>
        <argsstring>(iterator pos)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erases the element pointed to by <emphasis>pos</emphasis>. Returns an iterator to the next position (which could be <ref refid="classprism_1_1containers_1_1_vector_1af70c02efa2acea9da2ea192ba83e6edd" kindref="member">end()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="85" column="1" bodyfile="inc/containers/Vector.h" bodystart="393" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aea0ab66c14d100dc52b1adc7514544eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
        <definition>Vector&lt; T &gt;::iterator prism::containers::Vector&lt; T &gt;::erase</definition>
        <argsstring>(iterator from, iterator to)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erases the elements pointed to by the iterator range of <emphasis>from</emphasis> and <emphasis>to</emphasis>. Every element from <emphasis>from</emphasis> up to (but not including <emphasis>to</emphasis>) is erased. Returns an iterator to the first element after the erased elements (could be equal to <ref refid="classprism_1_1containers_1_1_vector_1af70c02efa2acea9da2ea192ba83e6edd" kindref="member">end()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="86" column="1" bodyfile="inc/containers/Vector.h" bodystart="403" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aa8bf1b1d3e71ace4738c62ab1862b082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::fill</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assigns <emphasis>value</emphasis> to every element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="87" column="1" bodyfile="inc/containers/Vector.h" bodystart="421" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ac12210a4e7500ec5f65919183c8883d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Vector&lt; T &gt;::first</definition>
        <argsstring>()</argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="88" column="1" bodyfile="inc/containers/Vector.h" bodystart="431" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a31d338782b0191168010f389d1064bff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Vector&lt; T &gt;::first</definition>
        <argsstring>() const </argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="89" column="1" bodyfile="inc/containers/Vector.h" bodystart="439" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a0a09f2dac185a2c6ff64e933eb840a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a557fd3cca76315ccd4112d8b7398e43c" kindref="member">reference</ref></type>
        <definition>Vector&lt; T &gt;::reference prism::containers::Vector&lt; T &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="90" column="1" bodyfile="inc/containers/Vector.h" bodystart="476" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ae05a68ee413141efa106155247b33de2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a9950012c32498b47e38c98f2ce9fe048" kindref="member">const_reference</ref></type>
        <definition>Vector&lt; T &gt;::const_reference prism::containers::Vector&lt; T &gt;::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the first element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="91" column="1" bodyfile="inc/containers/Vector.h" bodystart="484" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a0ea9d605ea36348b27c2035025b48c83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Vector&lt; T &gt;::indexOf</definition>
        <argsstring>(const T &amp;value, const int from=0) const </argsstring>
        <name>indexOf</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>from</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Searches the vector starting from index <emphasis>from</emphasis> (default is 0 if not specified) and returns the index of the first occurrence of <emphasis>value</emphasis> if found. Returns -1 otherwise. The vector&apos;s value type must support <ref refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="92" column="1" bodyfile="inc/containers/Vector.h" bodystart="494" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a63b8632544cfbfd0fc3668ec3facdb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::insert</definition>
        <argsstring>(const int index, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>value</emphasis> at index <emphasis>index</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="93" column="1" bodyfile="inc/containers/Vector.h" bodystart="505" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a7a9fb08b66313abc088643d14097e1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::insert</definition>
        <argsstring>(const int index, const int count, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>count</emphasis> copies of <emphasis>value</emphasis> starting at <emphasis>index</emphasis>.. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="94" column="1" bodyfile="inc/containers/Vector.h" bodystart="513" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a8d01a4c2e0409056c4829489f5eb2a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
        <definition>Vector&lt; T &gt;::iterator prism::containers::Vector&lt; T &gt;::insert</definition>
        <argsstring>(iterator insertBefore, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
          <declname>insertBefore</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>value</emphasis> in front of the position represented by the iterator <emphasis>insertBefore</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="95" column="1" bodyfile="inc/containers/Vector.h" bodystart="547" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a1b3b34741ace5fb8875aa4526565a35a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
        <definition>Vector&lt; T &gt;::iterator prism::containers::Vector&lt; T &gt;::insert</definition>
        <argsstring>(iterator insertBefore, const int count, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" kindref="member">iterator</ref></type>
          <declname>insertBefore</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>todo bounds check index Inserts <emphasis>count</emphasis> copies of <emphasis>value</emphasis> in front of the position represented by the iterator <emphasis>insertBefore</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="96" column="1" bodyfile="inc/containers/Vector.h" bodystart="522" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a2e4cd951704795ea090181341999ce71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this vector contains no elements i.e. size of 0 and false otherwise. Equivalent to <ref refid="classprism_1_1containers_1_1_vector_1a80e3ca5a538da5e15a4773173c820518" kindref="member">empty()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="97" column="1" bodyfile="inc/containers/Vector.h" bodystart="556" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aabfd6351d9878945f161881f2a53a6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Vector&lt; T &gt;::last</definition>
        <argsstring>()</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="98" column="1" bodyfile="inc/containers/Vector.h" bodystart="564" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a154c0df950e037c9a0eafff4a1eb6bd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Vector&lt; T &gt;::last</definition>
        <argsstring>() const </argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last element in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="99" column="1" bodyfile="inc/containers/Vector.h" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a6ca26d081aea20b16c8f8eb39e757f3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Vector&lt; T &gt;::lastIndexOf</definition>
        <argsstring>(const T &amp;value, const int from=-1) const </argsstring>
        <name>lastIndexOf</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>from</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the last occurrence of <emphasis>value</emphasis> in the vector. It searches backwards from index <emphasis>from</emphasis>. If /em from is -1 (the default) then the search starts from the last element. Returns -1 if there is no match found. The vector&apos;s value type must support <ref refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="100" column="1" bodyfile="inc/containers/Vector.h" bodystart="583" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a95d94736f6bf259e5e3d49b91398cb9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; prism::containers::Vector&lt; T &gt;::mid</definition>
        <argsstring>(const int startIndex, const int count=-1)</argsstring>
        <name>mid</name>
        <param>
          <type>const int</type>
          <declname>startIndex</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a new vector containing <emphasis>count</emphasis> elements from this vector starting from <emphasis>index</emphasis>. If <emphasis>count</emphasis> is -1 (the default) then all elements after <emphasis>index</emphasis> are copied across. It performs a bounds check so if <emphasis>startIndex</emphasis> + <emphasis>count</emphasis> goes past the end of the vector&apos;s storage then all the elements from <emphasis>startIndex</emphasis> up to and including the final element are copied over. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="101" column="1" bodyfile="inc/containers/Vector.h" bodystart="600" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a4d88f4bdbe0c53c54ffd19f0b5ee41ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the last element from the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="102" column="1" bodyfile="inc/containers/Vector.h" bodystart="621" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a9b86f6528da2e86b4bab295a2d041592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::pop_front</definition>
        <argsstring>()</argsstring>
        <name>pop_front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the first element from the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="103" column="1" bodyfile="inc/containers/Vector.h" bodystart="629" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a0c2c626481d6511be6ee627ca2f32290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::prepend</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>prepend</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>value</emphasis> at the start of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="104" column="1" bodyfile="inc/containers/Vector.h" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a3780f4bb968e34d2823916d07c887521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::push_back</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> at the end of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="105" column="1" bodyfile="inc/containers/Vector.h" bodystart="645" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a20918d385a82d9617d4ddfd77fef7cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::push_front</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>push_front</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds <emphasis>value</emphasis> at the start of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="106" column="1" bodyfile="inc/containers/Vector.h" bodystart="653" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a5094c70bfaf74052b9a9c3ca58efcb3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::remove</definition>
        <argsstring>(const int index)</argsstring>
        <name>remove</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the element at <emphasis>index</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="107" column="1" bodyfile="inc/containers/Vector.h" bodystart="671" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1afa033b46394170c516cd0888a91c950b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::remove</definition>
        <argsstring>(const int index, const int count)</argsstring>
        <name>remove</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes <emphasis>count</emphasis> elements starting from <emphasis>index</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="108" column="1" bodyfile="inc/containers/Vector.h" bodystart="679" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a4ada98ebf65274b4ab722574a8ec3ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::removeAll</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>removeAll</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all occurrences of <emphasis>value</emphasis> from the vector. The vector&apos;s value type must support <ref refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="109" column="1" bodyfile="inc/containers/Vector.h" bodystart="690" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1af9ce643eaac2b99e19f777c42c2d8601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::removeFirst</definition>
        <argsstring>()</argsstring>
        <name>removeFirst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the first element of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="110" column="1" bodyfile="inc/containers/Vector.h" bodystart="703" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a1393f714716c855540c0588eeee8957f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::removeLast</definition>
        <argsstring>()</argsstring>
        <name>removeLast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the last element of the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="111" column="1" bodyfile="inc/containers/Vector.h" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a540bcf579407d9af63b6e2c4ddf26a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::replace</definition>
        <argsstring>(const int index, const T &amp;value)</argsstring>
        <name>replace</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the value at <emphasis>index</emphasis> with <emphasis>value</emphasis>. <emphasis>index</emphasis> must be 0&lt;=index&gt;<ref refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" kindref="member">size()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="112" column="1" bodyfile="inc/containers/Vector.h" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ad69f77ef65090dfa70faedaabf62f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::reserve</definition>
        <argsstring>(const int newCapacity)</argsstring>
        <name>reserve</name>
        <param>
          <type>const int</type>
          <declname>newCapacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reserves enough memory for the vector to contain <emphasis>newCapacity</emphasis> elements i.e. newCapacity * sizeof(T). The capacity can only grow and will not lessen even if <ref refid="classprism_1_1containers_1_1_vector_1abf853c583423758c8ee9ec27fc1c210b" kindref="member">clear()</ref> or <ref refid="classprism_1_1containers_1_1_vector_1ac1c4b5ddafc74736193b9c7fd7598447" kindref="member">erase()</ref> is called. Only <ref refid="classprism_1_1containers_1_1_vector_1a3ae1c45819282708f4200bf2a56b6384" kindref="member">squeeze()</ref> can alter the capacity to a lower amount. If <emphasis>newCapacity</emphasis> is less than or equal to the current capacity then nothing changes. Any existing elements in the vector are not affected by this function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="113" column="1" bodyfile="inc/containers/Vector.h" bodystart="731" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Vector&lt; T &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements currently stored in the vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="114" column="1" bodyfile="inc/containers/Vector.h" bodystart="750" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a3ae1c45819282708f4200bf2a56b6384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Vector&lt; T &gt;::squeeze</definition>
        <argsstring>()</argsstring>
        <name>squeeze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys any unused memory currently held by this vector. For example, if the vector has a capacity of 10 and a size of 4, <ref refid="classprism_1_1containers_1_1_vector_1a3ae1c45819282708f4200bf2a56b6384" kindref="member">squeeze()</ref> will release the extra memory of the capacity resulting in a capacity and size of 4. If <ref refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" kindref="member">size()</ref> and <ref refid="classprism_1_1containers_1_1_vector_1a905b16131b216695f71172206215c8f3" kindref="member">capacity()</ref> are already equal then nothing happens. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="115" column="1" bodyfile="inc/containers/Vector.h" bodystart="760" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a383a15bf1e1c828161333601ef1ad49c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::startsWith</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>startsWith</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the vector is not empty and its first element is equal to <emphasis>value</emphasis> and false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="116" column="1" bodyfile="inc/containers/Vector.h" bodystart="779" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ac9b3e84cd37302201b36d1cd2383e387" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt;</type>
        <definition>List&lt; T &gt; prism::containers::Vector&lt; T &gt;::toList</definition>
        <argsstring>() const </argsstring>
        <name>toList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref> containing all the elements from this vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="117" column="1" bodyfile="inc/containers/Vector.h" bodystart="788" bodyend="796"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a7c6c5e81b6c7afdb12ccfb782c00f2ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt; T &gt; prism::containers::Vector&lt; T &gt;::toStdVector</definition>
        <argsstring>() const </argsstring>
        <name>toStdVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an returns a std::vector containing all the elements from this vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="118" column="1" bodyfile="inc/containers/Vector.h" bodystart="802" bodyend="811"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a54ce921915bed6b183a8d7d9e38acdb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(const int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at <emphasis>index</emphasis>. <emphasis>index</emphasis> must be 0&lt;=index&lt;<ref refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" kindref="member">size()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="123" column="1" bodyfile="inc/containers/Vector.h" bodystart="818" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ad6986fcc30641bdc1f3450859e0622dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(const int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at <emphasis>index</emphasis>. <emphasis>index</emphasis> must be 0&lt;=index&lt;<ref refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" kindref="member">size()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="124" column="1" bodyfile="inc/containers/Vector.h" bodystart="827" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1abc28dad2e43233bcb6572e8f8a6b4272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; prism::containers::Vector&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> to the end of the vector. Equivalent to <ref refid="classprism_1_1containers_1_1_vector_1a924f518701e9c8ac5bf5e72684c7d544" kindref="member">append()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="124" column="1" bodyfile="inc/containers/Vector.h" bodystart="835" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a5b6f26e306f7dc9da7ce3baf14a283da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; prism::containers::Vector&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends the contents of the <emphasis>rhs</emphasis> vector onto the end of this vector. Returns a reference to this vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="124" column="1" bodyfile="inc/containers/Vector.h" bodystart="845" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a1d7f4422d23cc8517ffeef1de6d946b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; prism::containers::Vector&lt; T &gt;::operator=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assignment operator assigns all of the elements from the vector <emphasis>rhs</emphasis> to this vector. Returns a reference to this vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="127" column="1" bodyfile="inc/containers/Vector.h" bodystart="858" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::operator==</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this vector with <emphasis>rhs</emphasis> and if both have the same number of elements in the same order then they are considered equal. Returns true if they are equal or false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="128" column="1" bodyfile="inc/containers/Vector.h" bodystart="877" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1aa10ff799ba15b841ae755e45d23fedf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::operator!=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this vector with <emphasis>rhs</emphasis> and if both have the same number of elements in the same order then they are considered equal. Returns true if they are equal or false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="129" column="1" bodyfile="inc/containers/Vector.h" bodystart="894" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a0a85af5e487dd19ffed0b9528dffbc3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; prism::containers::Vector&lt; T &gt;::operator+</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a new vector that contains all of the elements from this vector followed by the elements from <emphasis>rhs</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="130" column="1" bodyfile="inc/containers/Vector.h" bodystart="902" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a55650d16d61b9f33fcaa3cfa134b34d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt; T &gt; &amp; prism::containers::Vector&lt; T &gt;::operator+=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends the contents of <emphasis>rhs</emphasis> onto the end of this vector. Returns a reference to this vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="131" column="1" bodyfile="inc/containers/Vector.h" bodystart="913" bodyend="916"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a8b0deb146005e35368d6ad8e914cb6fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; prism::containers::Vector&lt; T &gt;::fromList</definition>
        <argsstring>(const List&lt; T &gt; &amp;list)</argsstring>
        <name>fromList</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a vector that contains all the items from <emphasis>list</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="120" column="1" bodyfile="inc/containers/Vector.h" bodystart="447" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1ad14e6cf4155c41528dfe0d1699264991" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt;</type>
        <definition>Vector&lt; T &gt; prism::containers::Vector&lt; T &gt;::fromStdVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;stdVec)</argsstring>
        <name>fromStdVector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>stdVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a vector of the same size and capacity and comprises the elements from the std::vector <emphasis>stdVec</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="121" column="1" bodyfile="inc/containers/Vector.h" bodystart="462" bodyend="470"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classprism_1_1containers_1_1_vector_1adea1a7e2e26629669d11a49d8899a1ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="136" column="1" bodyfile="inc/containers/Vector.h" bodystart="136" bodyend="140"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_vector_1a44b01df78092361ae0b5a563107c4588" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Vector&lt; T &gt;::rangeCheck</definition>
        <argsstring>(const int index) const </argsstring>
        <name>rangeCheck</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Private method that checks that the index is within bounds. Returns false if the index is invalid, true otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Vector.h" line="144" column="1" bodyfile="inc/containers/Vector.h" bodystart="662" bodyend="665"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/containers/Vector.h" line="47" column="1" bodyfile="inc/containers/Vector.h" bodystart="47" bodyend="145"/>
    <listofallmembers>
      <member refid="classprism_1_1containers_1_1_vector_1a924f518701e9c8ac5bf5e72684c7d544" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>append</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ab6604abf1fa5021c44fa4da3fe6e916f" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>at</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a2046a7661e670f12309ad6e988c9169e" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>at</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aad61ba2bc825e9a5b98c00279884faf5" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>back</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aec8c8e8c4dba5430d65ce2b050fa43ea" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>back</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a8a146dbfe2c2d67e9a33383e59b8ace0" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>begin</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a4310ee10517b621aaec41ac83cc66bb8" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>begin</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a905b16131b216695f71172206215c8f3" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>capacity</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ae237687c1dc7aca2868fa1395b6549ea" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>cbegin</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a09a061933b3d0946e9c25ad87e6b242a" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>cend</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1abf853c583423758c8ee9ec27fc1c210b" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>clear</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ab972cb3df6df07d9806f8750a948ec9d" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>const_iterator</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a1a5e05e74505807405e07550f8c1c5ad" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>const_pointer</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a9950012c32498b47e38c98f2ce9fe048" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>const_reference</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1addbf80b5fc2fad2e4e85beabfd92afd7" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>constBegin</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a2f38f1c1ea22186590873a799364becf" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>constData</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a1cebbe63705c688ec354119dd47b9e6c" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>constEnd</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a80fd2ca147e135b02b11a28f4edc2a0f" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>contains</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1af6eed18f3336ec579c89d64819e0cb74" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>count</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aec0a323d2112fb65d26034af98ca83ac" prot="private" virt="non-virtual"><scope>prism::containers::Vector</scope><name>d</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1acbc6ec2533f7853cf6ce5b8d0cc84d0b" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>data</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aa46fe53854caefbeae5e29f254c1657d" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>data</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1af003b53eb746fe1f294136b6d3384b18" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>difference_type</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a80e3ca5a538da5e15a4773173c820518" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>empty</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1af70c02efa2acea9da2ea192ba83e6edd" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>end</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ae2362e0b909620a7aad33bd659ef23a5" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>end</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ab4a8fa582eaf960a6bbc4a71391c32e7" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>endsWith</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ac1c4b5ddafc74736193b9c7fd7598447" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>erase</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aea0ab66c14d100dc52b1adc7514544eb" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>erase</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aa8bf1b1d3e71ace4738c62ab1862b082" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>fill</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ac12210a4e7500ec5f65919183c8883d2" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>first</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a31d338782b0191168010f389d1064bff" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>first</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a8b0deb146005e35368d6ad8e914cb6fd" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>fromList</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ad14e6cf4155c41528dfe0d1699264991" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>fromStdVector</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a0a09f2dac185a2c6ff64e933eb840a0a" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>front</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ae05a68ee413141efa106155247b33de2" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>front</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a0ea9d605ea36348b27c2035025b48c83" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>indexOf</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a63b8632544cfbfd0fc3668ec3facdb1d" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>insert</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a7a9fb08b66313abc088643d14097e1dd" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>insert</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a8d01a4c2e0409056c4829489f5eb2a64" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>insert</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a1b3b34741ace5fb8875aa4526565a35a" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>insert</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a2e4cd951704795ea090181341999ce71" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>isEmpty</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a00f2237bf0922d6299f1004c0a717fd5" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>iterator</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aabfd6351d9878945f161881f2a53a6e4" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>last</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a154c0df950e037c9a0eafff4a1eb6bd7" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>last</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a6ca26d081aea20b16c8f8eb39e757f3f" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>lastIndexOf</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a95d94736f6bf259e5e3d49b91398cb9d" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>mid</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aa10ff799ba15b841ae755e45d23fedf1" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator!=</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a0a85af5e487dd19ffed0b9528dffbc3c" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator+</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a55650d16d61b9f33fcaa3cfa134b34d2" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator+=</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1abc28dad2e43233bcb6572e8f8a6b4272" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a5b6f26e306f7dc9da7ce3baf14a283da" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1adea1a7e2e26629669d11a49d8899a1ec" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a1d7f4422d23cc8517ffeef1de6d946b7" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator=</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aa8f12b0a2b30bb59058c0d1207193b6d" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator==</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a54ce921915bed6b183a8d7d9e38acdb6" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator[]</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ad6986fcc30641bdc1f3450859e0622dc" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>operator[]</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a7205d98d3099bffc475e77acf7c8e2a1" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>pointer</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a4d88f4bdbe0c53c54ffd19f0b5ee41ce" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>pop_back</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a9b86f6528da2e86b4bab295a2d041592" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>pop_front</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a0c2c626481d6511be6ee627ca2f32290" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>prepend</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a3780f4bb968e34d2823916d07c887521" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>push_back</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a20918d385a82d9617d4ddfd77fef7cea" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>push_front</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a44b01df78092361ae0b5a563107c4588" prot="private" virt="non-virtual"><scope>prism::containers::Vector</scope><name>rangeCheck</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a557fd3cca76315ccd4112d8b7398e43c" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>reference</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a5094c70bfaf74052b9a9c3ca58efcb3e" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>remove</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1afa033b46394170c516cd0888a91c950b" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>remove</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a4ada98ebf65274b4ab722574a8ec3ab4" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>removeAll</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1af9ce643eaac2b99e19f777c42c2d8601" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>removeFirst</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a1393f714716c855540c0588eeee8957f" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>removeLast</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a540bcf579407d9af63b6e2c4ddf26a33" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>replace</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ad69f77ef65090dfa70faedaabf62f8b4" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>reserve</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1afca7821bc43be621b12e55f89f7f518a" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>size</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ad8f479032fe710d3bdf041929ee6f123" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>size_type</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a3ae1c45819282708f4200bf2a56b6384" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>squeeze</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a383a15bf1e1c828161333601ef1ad49c" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>startsWith</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1ac9b3e84cd37302201b36d1cd2383e387" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>toList</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a7c6c5e81b6c7afdb12ccfb782c00f2ce" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>toStdVector</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a81b3c7a63deb9dedb3b3dd84977c6cca" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>value_type</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aa2af3bb48d3a7cd783dff0270307a45e" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>Vector</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a8fd8f2944888a71c1e6e9ae0bbf890a2" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>Vector</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1aa3e11fefca796cb11588eb32bb6a89c5" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>Vector</name></member>
      <member refid="classprism_1_1containers_1_1_vector_1a58e4ef79be6d926803af6a47c61e4b30" prot="public" virt="non-virtual"><scope>prism::containers::Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
