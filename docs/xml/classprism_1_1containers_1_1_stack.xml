<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classprism_1_1containers_1_1_stack" kind="class" language="C++" prot="public">
    <compoundname>prism::containers::Stack</compoundname>
    <includes refid="_stack_8h" local="no">Stack.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>ContainerType</declname>
        <defname>ContainerType</defname>
        <defval><ref refid="classprism_1_1containers_1_1_vector" kindref="compound">Vector</ref>&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classprism_1_1containers_1_1_stack_1af28d1cb86c7abb7ccca2c7166895c574" prot="private" static="no" mutable="no">
        <type>ContainerType</type>
        <definition>ContainerType prism::containers::Stack&lt; T, ContainerType &gt;::container</definition>
        <argsstring></argsstring>
        <name>container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="25" column="1" bodyfile="inc/containers/Stack.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1a4043720d923c57d4efc3581e5a8043df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Stack&lt; T, ContainerType &gt;::Stack</definition>
        <argsstring>()</argsstring>
        <name>Stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empty stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="27" column="1" bodyfile="inc/containers/Stack.h" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1af2f1920726e21c2c14b41808767887d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Stack&lt; T, ContainerType &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the stack containers no elements and false otherwise. Added for STL-compatibility. Equivalent to <ref refid="classprism_1_1containers_1_1_stack_1acace29ab16f14720c32839f619280db8" kindref="member">isEmpty()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="28" column="1" bodyfile="inc/containers/Stack.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1acace29ab16f14720c32839f619280db8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Stack&lt; T, ContainerType &gt;::isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the stack containers no elements and false otherwise. Equivalent to <ref refid="classprism_1_1containers_1_1_stack_1af2f1920726e21c2c14b41808767887d6" kindref="member">empty()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="29" column="1" bodyfile="inc/containers/Stack.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1a09a12e102d230781566aeec2102d4e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Stack&lt; T, ContainerType &gt;::pop</definition>
        <argsstring>()</argsstring>
        <name>pop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the last (top) element in the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="30" column="1" bodyfile="inc/containers/Stack.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1aaf036034d96dd2c287cd81125c33b68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Stack&lt; T, ContainerType &gt;::push</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>push</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds <emphasis>value</emphasis> to the end (top) of the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="31" column="1" bodyfile="inc/containers/Stack.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1acc76a9972dc69ec8a9929e39bd81d1e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Stack&lt; T, ContainerType &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements currently in the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="32" column="1" bodyfile="inc/containers/Stack.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1a633615dbbafc1f89b75e916c26cb3550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Stack&lt; T, ContainerType &gt;::top</definition>
        <argsstring>()</argsstring>
        <name>top</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last (top) element in the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="33" column="1" bodyfile="inc/containers/Stack.h" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1ac5611e10a04cfbb4e50b7d1db01c012f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Stack&lt; T, ContainerType &gt;::top</definition>
        <argsstring>() const </argsstring>
        <name>top</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last (top) element in the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="34" column="1" bodyfile="inc/containers/Stack.h" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1aa6df6ae35e5793021618e43d45ce2927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Stack&lt; T, ContainerType &gt;::operator==</definition>
        <argsstring>(const Stack&lt; T, ContainerType &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_stack" kindref="compound">Stack</ref>&lt; T, ContainerType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this stack with <emphasis>rhs</emphasis> for equality. They are considered equal if they have the same number of elements in the same order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="36" column="1" bodyfile="inc/containers/Stack.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1a695f835109a49dc0fd2a87385bc6b53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Stack&lt; T, ContainerType &gt;::operator!=</definition>
        <argsstring>(const Stack&lt; T, ContainerType &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_stack" kindref="compound">Stack</ref>&lt; T, ContainerType &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this stack with <emphasis>rhs</emphasis> for equality. They are considered equal if they have the same number of elements in the same order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="37" column="1" bodyfile="inc/containers/Stack.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1a7d14262920e4b20435a270daf7fb1b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_stack" kindref="compound">Stack</ref>&lt; T, ContainerType &gt; &amp;</type>
        <definition>Stack&lt; T, ContainerType &gt; &amp; prism::containers::Stack&lt; T, ContainerType &gt;::operator+=</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds <emphasis>value</emphasis> to the end (top) of the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="38" column="1" bodyfile="inc/containers/Stack.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_stack_1a28fc9d291fab9c2bdeacd1832ab6d94c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_stack" kindref="compound">Stack</ref>&lt; T, ContainerType &gt; &amp;</type>
        <definition>Stack&lt; T, ContainerType &gt; &amp; prism::containers::Stack&lt; T, ContainerType &gt;::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds <emphasis>value</emphasis> to the end (top) of the stack. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Stack.h" line="38" column="1" bodyfile="inc/containers/Stack.h" bodystart="139" bodyend="142"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/containers/Stack.h" line="23" column="1" bodyfile="inc/containers/Stack.h" bodystart="23" bodyend="40"/>
    <listofallmembers>
      <member refid="classprism_1_1containers_1_1_stack_1af28d1cb86c7abb7ccca2c7166895c574" prot="private" virt="non-virtual"><scope>prism::containers::Stack</scope><name>container</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1af2f1920726e21c2c14b41808767887d6" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>empty</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1acace29ab16f14720c32839f619280db8" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>isEmpty</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1a695f835109a49dc0fd2a87385bc6b53b" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>operator!=</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1a7d14262920e4b20435a270daf7fb1b8c" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>operator+=</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1a28fc9d291fab9c2bdeacd1832ab6d94c" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1aa6df6ae35e5793021618e43d45ce2927" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>operator==</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1a09a12e102d230781566aeec2102d4e84" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>pop</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1aaf036034d96dd2c287cd81125c33b68f" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>push</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1acc76a9972dc69ec8a9929e39bd81d1e2" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>size</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1a4043720d923c57d4efc3581e5a8043df" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>Stack</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1a633615dbbafc1f89b75e916c26cb3550" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>top</name></member>
      <member refid="classprism_1_1containers_1_1_stack_1ac5611e10a04cfbb4e50b7d1db01c012f" prot="public" virt="non-virtual"><scope>prism::containers::Stack</scope><name>top</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
