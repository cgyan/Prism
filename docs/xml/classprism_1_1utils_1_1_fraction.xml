<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classprism_1_1utils_1_1_fraction" kind="class" language="C++" prot="public">
    <compoundname>prism::utils::Fraction</compoundname>
    <includes refid="_fraction_8h" local="no">Fraction.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classprism_1_1utils_1_1_fraction_1ab7695d1e4a994670b1f1e9097e94e3f3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int prism::utils::Fraction::m_n</definition>
        <argsstring></argsstring>
        <name>m_n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="19" column="1" bodyfile="inc/utils/Fraction.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classprism_1_1utils_1_1_fraction_1af385ad767d5d28b15f160f08b6113616" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int prism::utils::Fraction::m_d</definition>
        <argsstring></argsstring>
        <name>m_d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="20" column="1" bodyfile="inc/utils/Fraction.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a3f49d633d81da4cfdcb9ed254fd2f6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::utils::Fraction::Fraction</definition>
        <argsstring>(void)</argsstring>
        <name>Fraction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> object and sets its numerator and denominator to 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="23" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="18" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a974e11e4b34c9acf5660d2b162ce75c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::utils::Fraction::Fraction</definition>
        <argsstring>(const int numerator, const int denominator)</argsstring>
        <name>Fraction</name>
        <param>
          <type>const int</type>
          <declname>numerator</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> object setting the numerator and denominator to the values passed in. The class will attempt to simplify the fraction. i.e. 4 1 <mdash/> becomes <mdash/> 8 2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="24" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1aeeee544b74bd5c7fcebf2d3031e6af54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>prism::utils::Fraction::~Fraction</definition>
        <argsstring>(void)</argsstring>
        <name>~Fraction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys this <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="25" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a5a48def1833f80869aa0311ad0f7ca45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::utils::Fraction::denominator</definition>
        <argsstring>() const </argsstring>
        <name>denominator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns this <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>&apos;s denominator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="27" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1aaacc24209bd619048a5e5349c658e1b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::utils::Fraction::numerator</definition>
        <argsstring>() const </argsstring>
        <name>numerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns this <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>&apos;s numerator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="28" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a6351fa05c821e6f4c1cd2f5332d179e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction prism::utils::Fraction::reciprocal</definition>
        <argsstring>() const </argsstring>
        <name>reciprocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> that is the reciprocal of this fraction. i.e. the numerator and denominator are swapped around. 1 2 The reciprocal of <mdash/> is <mdash/> 2 1 Any fraction multiplied by its own reciprocal will always equal 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="29" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a9c32592dd8db6178416c24396a8af35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::utils::Fraction::setNumerator</definition>
        <argsstring>(const int numerator)</argsstring>
        <name>setNumerator</name>
        <param>
          <type>const int</type>
          <declname>numerator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>&apos;s numerator to /em numerator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="30" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="91" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a4e32674efe260698b75f7a95a1d9ae1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::utils::Fraction::setDenominator</definition>
        <argsstring>(const int denominator)</argsstring>
        <name>setDenominator</name>
        <param>
          <type>const int</type>
          <declname>denominator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>&apos;s denominator to /em denominator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="31" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a2ffadaf23c1bd5d514e9f9216b52ccec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
        <definition>Fraction &amp; prism::utils::Fraction::simplify</definition>
        <argsstring>()</argsstring>
        <name>simplify</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><heading level="2">8 </heading>
</para><para>16 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="32" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="107" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a225c4aec1a9cdd366b04be2642ecf3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction operator+</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds the fractions /em f1 and /em f2 together and returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. If the two denominators are the same then the two numerators are added together to form the new numerator and the original denominator is kept the same. e.g. 1 1 2 <mdash/> + <mdash/> = <mdash/> 4 4 4 If the denominators are different then we alter the fractions in order to make both denominators the same value. We make a whole fraction out of the second fraction&apos;s denominator and multiply it by the first fraction. Then make a whole fraction from the first fraction&apos;s denominator and multiply it by the second fraction. Now we can simply add together the two numerators and keep the denominator the same. 1 1 | 4 1 | | 1 2 | 4 2 6 3 <mdash/> + <mdash/> = |<mdash/> x <mdash/>| + |<mdash/> x <mdash/>| = <mdash/> + <mdash/> = <mdash/> = <mdash/> 2 4 | 4 2 | | 4 2 | 8 8 8 4 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="35" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1aa93e0ab89fa477f3b044cf5826df7c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction operator-</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtracts the fractions /em f1 and /em f2 and returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. If the two denominators are the same then the two numerators are subtracted to form the new numerator and the original denominator is kept the same. e.g. 3 1 2 <mdash/> - <mdash/> = <mdash/> 4 4 4 If the denominators are different then we alter the fractions in order to make both denominators the same value. We make a whole fraction out of the second fraction&apos;s denominator and multiply it by the first fraction. Then make a whole fraction from the first fraction&apos;s denominator and multiply it by the second fraction. Now we can simply subtract the two numerators and keep the denominator the same. 3 1 | 2 3 | | 1 4 | 6 4 2 1 <mdash/> - <mdash/> = |<mdash/> x <mdash/>| - |<mdash/> x <mdash/>| = <mdash/> - <mdash/> = <mdash/> = <mdash/> 4 2 | 2 4 | | 2 4 | 8 8 8 4 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="36" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="159" bodyend="165"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1ad106ee756801021779f14e992439db4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction operator*</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies /em f1 and /em f2 together and returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> multiplication is the easiest arithmetical operation. Simply multiply the two numerators together to form the new numerator and multiply the two denominators together to form the new denominator. e.g. 2 8 2x8 16 4 <mdash/> x <mdash/> = <mdash/> = <mdash/> = <mdash/> 5 4 5x4 20 5 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="37" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a00eb461e6959195ce533d9d8f9b0855d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction operator*</definition>
        <argsstring>(const Fraction &amp;fraction, const int i)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>fraction</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> /em fraction by the whole number /em i. Returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="38" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a2f76d38f8274375542a97c3154af16eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction operator*</definition>
        <argsstring>(const int i, const Fraction &amp;fraction)</argsstring>
        <name>operator*</name>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the whole number /em i by the <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> /em fraction. Returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="39" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a2a185031bd64d6b227509aeacf3b5c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref></type>
        <definition>Fraction operator/</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Divides /em f1 by /em f2 and returns a new <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> division is achieved by taking the reciprocal of the second fraction and multiplying it against the first fraction. See /em <ref refid="classprism_1_1utils_1_1_fraction_1a6351fa05c821e6f4c1cd2f5332d179e7" kindref="member">Fraction::reciprocal()</ref> for more information. 3 2 3 7 21 <mdash/> / <mdash/> = <mdash/> * <mdash/> = <mdash/> 4 7 4 2 8 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="40" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="207" bodyend="209"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a557b4641e321113411fe440a2bc4e9cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend const bool</type>
        <definition>const bool operator&lt;</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if /em f1 is less than /em f2, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="41" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="214" bodyend="224"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a4307a97fd1a744418e8e2d64fb05ffd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend const bool</type>
        <definition>const bool operator&gt;</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if /em f1 is less than /em f2, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="42" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="229" bodyend="231"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a061d9325f891c3601d892edce079652b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend const bool</type>
        <definition>const bool operator==</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if /em f1 and /em f2 are equal in value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="43" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="236" bodyend="244"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1a2469410854b8425a70b1489afa5651d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend const bool</type>
        <definition>const bool operator!=</definition>
        <argsstring>(const Fraction &amp;f1, const Fraction &amp;f2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if /em f1 does not equal /em f2 in value, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="44" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1utils_1_1_fraction_1aae68a18403f22736f297b8671746f144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Fraction &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows an instance of <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref> to be written to the ostream and returns a reference to the ostream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="45" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="256" bodyend="259"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classprism_1_1utils_1_1_fraction_1a4cf3258b988fb56148ccd83935254c26" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::utils::Fraction::greatestCommonFactor</definition>
        <argsstring>()</argsstring>
        <name>greatestCommonFactor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates and returns the greatest common factor of this <ref refid="classprism_1_1utils_1_1_fraction" kindref="compound">Fraction</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils/Fraction.h" line="48" column="1" bodyfile="src/utils/Fraction.cpp" bodystart="58" bodyend="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/utils/Fraction.h" line="17" column="1" bodyfile="inc/utils/Fraction.h" bodystart="17" bodyend="49"/>
    <listofallmembers>
      <member refid="classprism_1_1utils_1_1_fraction_1a5a48def1833f80869aa0311ad0f7ca45" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>denominator</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a3f49d633d81da4cfdcb9ed254fd2f6b4" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>Fraction</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a974e11e4b34c9acf5660d2b162ce75c6" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>Fraction</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a4cf3258b988fb56148ccd83935254c26" prot="private" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>greatestCommonFactor</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1af385ad767d5d28b15f160f08b6113616" prot="private" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>m_d</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1ab7695d1e4a994670b1f1e9097e94e3f3" prot="private" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>m_n</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1aaacc24209bd619048a5e5349c658e1b5" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>numerator</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a2469410854b8425a70b1489afa5651d5" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator!=</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1ad106ee756801021779f14e992439db4a" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator*</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a00eb461e6959195ce533d9d8f9b0855d" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator*</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a2f76d38f8274375542a97c3154af16eb" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator*</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a225c4aec1a9cdd366b04be2642ecf3bc" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator+</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1aa93e0ab89fa477f3b044cf5826df7c14" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator-</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a2a185031bd64d6b227509aeacf3b5c69" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator/</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a557b4641e321113411fe440a2bc4e9cb" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator&lt;</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1aae68a18403f22736f297b8671746f144" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a061d9325f891c3601d892edce079652b" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator==</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a4307a97fd1a744418e8e2d64fb05ffd5" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>operator&gt;</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a6351fa05c821e6f4c1cd2f5332d179e7" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>reciprocal</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a4e32674efe260698b75f7a95a1d9ae1e" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>setDenominator</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a9c32592dd8db6178416c24396a8af35f" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>setNumerator</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1a2ffadaf23c1bd5d514e9f9216b52ccec" prot="public" virt="non-virtual"><scope>prism::utils::Fraction</scope><name>simplify</name></member>
      <member refid="classprism_1_1utils_1_1_fraction_1aeeee544b74bd5c7fcebf2d3031e6af54" prot="public" virt="virtual"><scope>prism::utils::Fraction</scope><name>~Fraction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
