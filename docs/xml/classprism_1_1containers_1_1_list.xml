<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classprism_1_1containers_1_1_list" kind="class" language="C++" prot="public">
    <compoundname>prism::containers::List</compoundname>
    <includes refid="_list_8h" local="no">List.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1a85a6f8c9263312dfe239f739da68d542" prot="private" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_node" kindref="compound">ListNode</ref>&lt; T &gt;</type>
        <definition>typedef ListNode&lt;T&gt; prism::containers::List&lt; T &gt;::Node</definition>
        <argsstring></argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="43" column="1" bodyfile="inc/containers/List.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_iterator" kindref="compound">ListIterator</ref>&lt; <ref refid="structprism_1_1containers_1_1_list_node" kindref="compound">Node</ref>, T &gt;</type>
        <definition>typedef ListIterator&lt;Node, T&gt; prism::containers::List&lt; T &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="45" column="1" bodyfile="inc/containers/List.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_const_iterator" kindref="compound">ListConstIterator</ref>&lt; <ref refid="structprism_1_1containers_1_1_list_node" kindref="compound">Node</ref>, T &gt;</type>
        <definition>typedef ListConstIterator&lt;Node, T&gt; prism::containers::List&lt; T &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="46" column="1" bodyfile="inc/containers/List.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1ae7c9f99dba5936d744397455c97aacde" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_iterator_1a70680642555c1d031e3e99e66b89680d" kindref="member">iterator::reference</ref></type>
        <definition>typedef iterator::reference prism::containers::List&lt; T &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="47" column="1" bodyfile="inc/containers/List.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1a7c1ae893be7215e14e183c0e3652e1b5" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_const_iterator_1a75f67a8dc204310a4ec2ad3104b85c3c" kindref="member">const_iterator::reference</ref></type>
        <definition>typedef const_iterator::reference prism::containers::List&lt; T &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="48" column="1" bodyfile="inc/containers/List.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1a93454816d3759016ad6736a21fc1892c" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_iterator_1a2e2390561608db7ef1938a21f32e7314" kindref="member">iterator::pointer</ref></type>
        <definition>typedef iterator::pointer prism::containers::List&lt; T &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="49" column="1" bodyfile="inc/containers/List.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1a9d28e5cd275b4bb9afe1f5b3ddb90fed" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_const_iterator_1a14b03b825ec014eaf85130739c0fa35d" kindref="member">const_iterator::pointer</ref></type>
        <definition>typedef const_iterator::pointer prism::containers::List&lt; T &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="50" column="1" bodyfile="inc/containers/List.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1ab1d5e3904b183e4e450f21d8fdffa31e" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_iterator_1a09ec679d2e078abe6f1debf80c494300" kindref="member">iterator::value_type</ref></type>
        <definition>typedef iterator::value_type prism::containers::List&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="51" column="1" bodyfile="inc/containers/List.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1a27674a278c68d3f0242fc13b87cdf0f0" prot="public" static="no">
        <type><ref refid="structprism_1_1containers_1_1_list_iterator_1a5d36bc90dfcc66e888054ac1fa8de786" kindref="member">iterator::difference_type</ref></type>
        <definition>typedef iterator::difference_type prism::containers::List&lt; T &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="52" column="1" bodyfile="inc/containers/List.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_list_1a13996f935ad746b4eef16686ade28f35" prot="public" static="no">
        <type>int</type>
        <definition>typedef int prism::containers::List&lt; T &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="53" column="1" bodyfile="inc/containers/List.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classprism_1_1containers_1_1_list_1ada79cc0aa6f4229e733a1745a183e392" prot="protected" static="no" mutable="no">
        <type><ref refid="structprism_1_1containers_1_1_list_node" kindref="compound">Node</ref> *</type>
        <definition>Node* prism::containers::List&lt; T &gt;::m_header</definition>
        <argsstring></argsstring>
        <name>m_header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="56" column="1" bodyfile="inc/containers/List.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classprism_1_1containers_1_1_list_1aab976f075243f4b000e756e1434b59c8" prot="protected" static="no" mutable="no">
        <type><ref refid="structprism_1_1containers_1_1_list_node" kindref="compound">Node</ref> *</type>
        <definition>Node* prism::containers::List&lt; T &gt;::m_tailer</definition>
        <argsstring></argsstring>
        <name>m_tailer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="57" column="1" bodyfile="inc/containers/List.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classprism_1_1containers_1_1_list_1a0aa092d322df5228c2eec7863fe22b7e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int prism::containers::List&lt; T &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="58" column="1" bodyfile="inc/containers/List.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1abeda74a299867392e923e6a1087cc934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::List&lt; T &gt;::List</definition>
        <argsstring>()</argsstring>
        <name>List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs an empty list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="60" column="1" bodyfile="inc/containers/List.h" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a2575a3aa60068e7384d33874a203193c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::List&lt; T &gt;::List</definition>
        <argsstring>(const List&lt; T &gt; &amp;copy)</argsstring>
        <name>List</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy-constructs a new list from <emphasis>copy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="61" column="1" bodyfile="inc/containers/List.h" bodystart="127" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ade258bf5c3a96946012a3e938aa0183a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>prism::containers::List&lt; T &gt;::~List&lt; T &gt;</definition>
        <argsstring>()</argsstring>
        <name>~List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="62" column="1" bodyfile="inc/containers/List.h" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a73b3bbd57d3fc71ecc43a8ac20de6463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
        <definition>List&lt; T &gt;::iterator prism::containers::List&lt; T &gt;::append</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> at the end of this list. Returns an iterator pointing to the item just inserted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="63" column="1" bodyfile="inc/containers/List.h" bodystart="155" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ab2bb2c8183ac1c8b4a9d653957de1a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::List&lt; T &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last item in the list. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="64" column="1" bodyfile="inc/containers/List.h" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1af983e655ba4548f204392fe5b9818c8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::List&lt; T &gt;::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last item in the list. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="65" column="1" bodyfile="inc/containers/List.h" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a37b0107fcd6077f89ff5fb00c31c27a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
        <definition>List&lt; T &gt;::iterator prism::containers::List&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the first item in the list. If the list is empty then the returned iterator is equal to <ref refid="classprism_1_1containers_1_1_list_1a1362368fe30bae327525def3d6e06707" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="66" column="1" bodyfile="inc/containers/List.h" bodystart="181" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a5389c68ee05bd5901e48a9d229186c0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" kindref="member">const_iterator</ref></type>
        <definition>List&lt; T &gt;::const_iterator prism::containers::List&lt; T &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the first item in the list. If the list is empty then the returned iterator is equal to <ref refid="classprism_1_1containers_1_1_list_1a1362368fe30bae327525def3d6e06707" kindref="member">end()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="67" column="1" bodyfile="inc/containers/List.h" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a87b971bb8aa556097a9b255537245050" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" kindref="member">const_iterator</ref></type>
        <definition>List&lt; T &gt;::const_iterator prism::containers::List&lt; T &gt;::cbegin</definition>
        <argsstring>() const </argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator that points to the first item in the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="68" column="1" bodyfile="inc/containers/List.h" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a1421915d043f5ca5fadf9ed8d03757f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" kindref="member">const_iterator</ref></type>
        <definition>List&lt; T &gt;::const_iterator prism::containers::List&lt; T &gt;::cend</definition>
        <argsstring>() const </argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the imaginary position one past the last item. This iterator should not be dereferenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="69" column="1" bodyfile="inc/containers/List.h" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ad56d4aaece9204fcf7ac0bd886068ef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" kindref="member">const_iterator</ref></type>
        <definition>List&lt; T &gt;::const_iterator prism::containers::List&lt; T &gt;::constBegin</definition>
        <argsstring>() const </argsstring>
        <name>constBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator that points to the first item in the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="70" column="1" bodyfile="inc/containers/List.h" bodystart="224" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a97a911f414b0a882119f376fd32a41fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" kindref="member">const_iterator</ref></type>
        <definition>List&lt; T &gt;::const_iterator prism::containers::List&lt; T &gt;::constEnd</definition>
        <argsstring>() const </argsstring>
        <name>constEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the imaginary position one past the last item. This iterator should not be dereferenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="71" column="1" bodyfile="inc/containers/List.h" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ab28a58bffffbc402d96fbf61d7e51ccc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::contains</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>contains</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this list contains <emphasis>value</emphasis>, false otherwise. The value type should have an implementation of <ref refid="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="72" column="1" bodyfile="inc/containers/List.h" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ae30ad8e67cef8a448894523143e932b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::List&lt; T &gt;::count</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>count</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Counts and returns the number of occurrences of <emphasis>value</emphasis> in this list. The value type should have an implementation of <ref refid="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="73" column="1" bodyfile="inc/containers/List.h" bodystart="258" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1add30a4f4e839aa17e3c19e1b442eac82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes every item from this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="74" column="1" bodyfile="inc/containers/List.h" bodystart="214" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a28604c982fe03e3bb7bd50c137581d9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the list contains no items, false otherwise. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1ac96aee1235d2fdfbf1582fd5bc63c410" kindref="member">isEmpty()</ref>. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="75" column="1" bodyfile="inc/containers/List.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a1362368fe30bae327525def3d6e06707" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
        <definition>List&lt; T &gt;::iterator prism::containers::List&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the imaginary position one past the last item. This iterator should not be dereferenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="76" column="1" bodyfile="inc/containers/List.h" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1affdcd6a78a4a8d0f68a4e7ad56e35817" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" kindref="member">const_iterator</ref></type>
        <definition>List&lt; T &gt;::const_iterator prism::containers::List&lt; T &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator to the imaginary item one past the last item. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="77" column="1" bodyfile="inc/containers/List.h" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a649a5398e9b8175d096936f0bcfbf875" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::endsWith</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>endsWith</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the list is not empty and the last item is equal to <emphasis>value</emphasis>, false otherwise. The value type should have an implementation of <ref refid="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="78" column="1" bodyfile="inc/containers/List.h" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a67ecb783c3e59bd3ff2d8f316a6877b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
        <definition>List&lt; T &gt;::iterator prism::containers::List&lt; T &gt;::erase</definition>
        <argsstring>(iterator pos)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the item from the list pointed to by <emphasis>pos</emphasis>. If <emphasis>pos</emphasis> is equal to <ref refid="classprism_1_1containers_1_1_list_1a1362368fe30bae327525def3d6e06707" kindref="member">end()</ref> then nothing is removed and <emphasis>pos</emphasis> is returned. Otherwise an iterator to the item after the one just removed is returned instead which could be equal to <ref refid="classprism_1_1containers_1_1_list_1a1362368fe30bae327525def3d6e06707" kindref="member">end()</ref> if the list is now empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="79" column="1" bodyfile="inc/containers/List.h" bodystart="312" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ae0c1ffb5c1b6a7d33fcefc308ecfc306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::List&lt; T &gt;::first</definition>
        <argsstring>()</argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1a0c1937fcacc13e2646f2f359ff9839c3" kindref="member">front()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="80" column="1" bodyfile="inc/containers/List.h" bodystart="332" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a3443d1f880e9679f2f2a63e3d9762454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::List&lt; T &gt;::first</definition>
        <argsstring>() const </argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the first item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1a0c1937fcacc13e2646f2f359ff9839c3" kindref="member">front()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="81" column="1" bodyfile="inc/containers/List.h" bodystart="341" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a0c1937fcacc13e2646f2f359ff9839c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::List&lt; T &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first item in the list. Added for STL-compatibility. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1ae0c1ffb5c1b6a7d33fcefc308ecfc306" kindref="member">first()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="82" column="1" bodyfile="inc/containers/List.h" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ab4544a4c38e8cc74a9c6c1164a1a32ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::List&lt; T &gt;::front</definition>
        <argsstring>() const </argsstring>
        <name>front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the first item in the list. Added for STL-compatibility. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1ae0c1ffb5c1b6a7d33fcefc308ecfc306" kindref="member">first()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="83" column="1" bodyfile="inc/containers/List.h" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a0ff4c21815c2a490bfe845a1755a662d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
        <definition>List&lt; T &gt;::iterator prism::containers::List&lt; T &gt;::insert</definition>
        <argsstring>(const iterator &amp;pos, const T &amp;value)</argsstring>
        <name>insert</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>value</emphasis> at one position after the item at <emphasis>pos</emphasis>. Returns an iterator to the item just inserted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="84" column="1" bodyfile="inc/containers/List.h" bodystart="368" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ac96aee1235d2fdfbf1582fd5bc63c410" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the list contains no items, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="85" column="1" bodyfile="inc/containers/List.h" bodystart="386" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ad49c24e7772a066c684e46e95822f9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::List&lt; T &gt;::last</definition>
        <argsstring>()</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1ab2bb2c8183ac1c8b4a9d653957de1a0d" kindref="member">back()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="86" column="1" bodyfile="inc/containers/List.h" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1aa710f69ae116914b70d14f77566c610a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::List&lt; T &gt;::last</definition>
        <argsstring>() const </argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1ab2bb2c8183ac1c8b4a9d653957de1a0d" kindref="member">back()</ref>; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="87" column="1" bodyfile="inc/containers/List.h" bodystart="402" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a771d12f853d80247f8c9b10cd047da37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::pop_back</definition>
        <argsstring>()</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the last item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1aa7309854e3e20f12f3c0da9bd780a2b8" kindref="member">removeLast()</ref>. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="88" column="1" bodyfile="inc/containers/List.h" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1af75089c107fc31c602ace1b60b5ddeaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::pop_front</definition>
        <argsstring>()</argsstring>
        <name>pop_front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the first item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1a15a535214d35ee28ef09fafa0fcf0ce8" kindref="member">removeFirst()</ref>. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="89" column="1" bodyfile="inc/containers/List.h" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a54efaef0d1bc7c0f6dc3b22cb7e37c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::push_back</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> to the end of the list and is equivalent to <ref refid="classprism_1_1containers_1_1_list_1a73b3bbd57d3fc71ecc43a8ac20de6463" kindref="member">append()</ref>. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="90" column="1" bodyfile="inc/containers/List.h" bodystart="435" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a0239344b13433e0fc7afb2b251fffe6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::push_front</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>push_front</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepends <emphasis>value</emphasis> at the beginning of the list and is equivalent to <ref refid="classprism_1_1containers_1_1_list_1ab9f116ffab28654029ff19ec0a538ca7" kindref="member">prepend()</ref>. Added for STL-compatibility. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="91" column="1" bodyfile="inc/containers/List.h" bodystart="443" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ab9f116ffab28654029ff19ec0a538ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" kindref="member">iterator</ref></type>
        <definition>List&lt; T &gt;::iterator prism::containers::List&lt; T &gt;::prepend</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>prepend</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds <emphasis>value</emphasis> to the start of the list. Returns an iterator to the item just inserted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="92" column="1" bodyfile="inc/containers/List.h" bodystart="427" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a8e480351b98276da8fb71d16a7d95ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::removeAll</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>removeAll</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes all occurrences of <emphasis>value</emphasis> from the list. To remove all items from the list use <ref refid="classprism_1_1containers_1_1_list_1add30a4f4e839aa17e3c19e1b442eac82" kindref="member">clear()</ref>. The value type should have an implementation of <ref refid="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="93" column="1" bodyfile="inc/containers/List.h" bodystart="452" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a15a535214d35ee28ef09fafa0fcf0ce8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::removeFirst</definition>
        <argsstring>()</argsstring>
        <name>removeFirst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the first item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1af75089c107fc31c602ace1b60b5ddeaa" kindref="member">pop_front()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="94" column="1" bodyfile="inc/containers/List.h" bodystart="464" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a7af38d1a27f700c6e5bf20cdae4866b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::removeFirstOf</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>removeFirstOf</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the first occurrence of <emphasis>value</emphasis> from the list. The value type should have an implementation of <ref refid="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="95" column="1" bodyfile="inc/containers/List.h" bodystart="473" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1aa7309854e3e20f12f3c0da9bd780a2b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::List&lt; T &gt;::removeLast</definition>
        <argsstring>()</argsstring>
        <name>removeLast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the last item in the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1a771d12f853d80247f8c9b10cd047da37" kindref="member">pop_back()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="96" column="1" bodyfile="inc/containers/List.h" bodystart="488" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ac85e533ea3e53efcbba0003725f15b5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::List&lt; T &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of items contained in the list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="97" column="1" bodyfile="inc/containers/List.h" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1aed2ef7316203fb0c0308991d62b8d3ae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::startsWith</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>startsWith</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the list is not empty and the first item equals <emphasis>value</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="98" column="1" bodyfile="inc/containers/List.h" bodystart="504" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ac8b0490456a04d249a29c14487d310f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::forward_list&lt; T &gt;</type>
        <definition>std::forward_list&lt; T &gt; prism::containers::List&lt; T &gt;::toStdForwardList</definition>
        <argsstring>() const </argsstring>
        <name>toStdForwardList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a std::forward_list containing the items from this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="99" column="1" bodyfile="inc/containers/List.h" bodystart="515" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a5a0d21cc245c0021f60202f886ce0366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
        <definition>List&lt; T &gt; &amp; prism::containers::List&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> to the end of the list. Equivalent to <ref refid="classprism_1_1containers_1_1_list_1a73b3bbd57d3fc71ecc43a8ac20de6463" kindref="member">append()</ref> and is useful to chain appends together i.e. list &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="99" column="1" bodyfile="inc/containers/List.h" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a4be36f1e4e06693c7482af37c97b5783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
        <definition>List&lt; T &gt; &amp; prism::containers::List&lt; T &gt;::operator&lt;&lt;</definition>
        <argsstring>(const List&lt; T &gt; &amp;list)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends the items in <emphasis>list</emphasis> to the end of this list. Returns a reference to this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="99" column="1" bodyfile="inc/containers/List.h" bodystart="542" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::operator==</definition>
        <argsstring>(const List&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this list is equal to the other list <emphasis>rhs</emphasis>. They are considered equal if they are the same size and have the same values in the same order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="103" column="1" bodyfile="inc/containers/List.h" bodystart="551" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a2b348d356754ac82d81fb710e0ffe136" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::List&lt; T &gt;::operator!=</definition>
        <argsstring>(const List&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this list is equal to the other list <emphasis>rhs</emphasis>. They are considered equal if they are the same size and have the same values in the same order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="104" column="1" bodyfile="inc/containers/List.h" bodystart="568" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ade1b59b663876dff902045eb763e2abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
        <definition>List&lt; T &gt; &amp; prism::containers::List&lt; T &gt;::operator=</definition>
        <argsstring>(const List&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assigns the list <emphasis>rhs</emphasis> to this list. Returns a reference to this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="105" column="1" bodyfile="inc/containers/List.h" bodystart="577" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1ac8c6b1c2e0692d567f4cb98be914405f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt;</type>
        <definition>List&lt; T &gt; prism::containers::List&lt; T &gt;::operator+</definition>
        <argsstring>(const List&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates and returns a new list that starts with this list followed by the list <emphasis>rhs</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="106" column="1" bodyfile="inc/containers/List.h" bodystart="587" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a9ac0e1bb4dcd34666b325f8ec63bea96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
        <definition>List&lt; T &gt; &amp; prism::containers::List&lt; T &gt;::operator+=</definition>
        <argsstring>(const List&lt; T &gt; &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends the contents of the list <emphasis>rhs</emphasis> to the end of this list. Returns a reference to this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="107" column="1" bodyfile="inc/containers/List.h" bodystart="603" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a032dbc85b98879778aec4e369657e5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
        <definition>List&lt; T &gt; &amp; prism::containers::List&lt; T &gt;::operator+=</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends <emphasis>value</emphasis> to the end of the list. Returns a reference to this list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="108" column="1" bodyfile="inc/containers/List.h" bodystart="617" bodyend="619"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_list_1a8b328da11995f5e347a63886e292fc76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt;</type>
        <definition>List&lt; T &gt; prism::containers::List&lt; T &gt;::fromStdForwardList</definition>
        <argsstring>(const std::forward_list&lt; T &gt; &amp;fl)</argsstring>
        <name>fromStdForwardList</name>
        <param>
          <type>const std::forward_list&lt; T &gt; &amp;</type>
          <declname>fl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static method that creates and returns a new list from a std::forward_list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="110" column="1" bodyfile="inc/containers/List.h" bodystart="625" bodyend="633"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="64">
        <label>prism::containers::List&lt; T &gt;</label>
        <link refid="classprism_1_1containers_1_1_list"/>
        <childnode refid="65" relation="usage">
          <edgelabel>m_header</edgelabel>
          <edgelabel>m_tailer</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>prism::containers::ListNode&lt; T &gt;</label>
        <link refid="structprism_1_1containers_1_1_list_node"/>
        <childnode refid="65" relation="usage">
          <edgelabel>prev</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="inc/containers/List.h" line="42" column="1" bodyfile="inc/containers/List.h" bodystart="42" bodyend="112"/>
    <listofallmembers>
      <member refid="classprism_1_1containers_1_1_list_1a73b3bbd57d3fc71ecc43a8ac20de6463" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>append</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ab2bb2c8183ac1c8b4a9d653957de1a0d" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>back</name></member>
      <member refid="classprism_1_1containers_1_1_list_1af983e655ba4548f204392fe5b9818c8b" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>back</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a37b0107fcd6077f89ff5fb00c31c27a7" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>begin</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a5389c68ee05bd5901e48a9d229186c0d" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>begin</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a87b971bb8aa556097a9b255537245050" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>cbegin</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a1421915d043f5ca5fadf9ed8d03757f8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>cend</name></member>
      <member refid="classprism_1_1containers_1_1_list_1add30a4f4e839aa17e3c19e1b442eac82" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>clear</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ab7a3833614e0dbdcc666829f86efa5e2" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>const_iterator</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a9d28e5cd275b4bb9afe1f5b3ddb90fed" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>const_pointer</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a7c1ae893be7215e14e183c0e3652e1b5" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>const_reference</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ad56d4aaece9204fcf7ac0bd886068ef8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>constBegin</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a97a911f414b0a882119f376fd32a41fc" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>constEnd</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ab28a58bffffbc402d96fbf61d7e51ccc" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>contains</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ae30ad8e67cef8a448894523143e932b1" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>count</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a27674a278c68d3f0242fc13b87cdf0f0" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>difference_type</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a28604c982fe03e3bb7bd50c137581d9b" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>empty</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a1362368fe30bae327525def3d6e06707" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>end</name></member>
      <member refid="classprism_1_1containers_1_1_list_1affdcd6a78a4a8d0f68a4e7ad56e35817" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>end</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a649a5398e9b8175d096936f0bcfbf875" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>endsWith</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a67ecb783c3e59bd3ff2d8f316a6877b2" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>erase</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ae0c1ffb5c1b6a7d33fcefc308ecfc306" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>first</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a3443d1f880e9679f2f2a63e3d9762454" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>first</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a8b328da11995f5e347a63886e292fc76" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>fromStdForwardList</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a0c1937fcacc13e2646f2f359ff9839c3" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>front</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ab4544a4c38e8cc74a9c6c1164a1a32ad" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>front</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a0ff4c21815c2a490bfe845a1755a662d" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>insert</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ac96aee1235d2fdfbf1582fd5bc63c410" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>isEmpty</name></member>
      <member refid="classprism_1_1containers_1_1_list_1af3a4f72e9b96d080fe64d1803c91c7f8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>iterator</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ad49c24e7772a066c684e46e95822f9ce" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>last</name></member>
      <member refid="classprism_1_1containers_1_1_list_1aa710f69ae116914b70d14f77566c610a" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>last</name></member>
      <member refid="classprism_1_1containers_1_1_list_1abeda74a299867392e923e6a1087cc934" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>List</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a2575a3aa60068e7384d33874a203193c" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>List</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ada79cc0aa6f4229e733a1745a183e392" prot="protected" virt="non-virtual"><scope>prism::containers::List</scope><name>m_header</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a0aa092d322df5228c2eec7863fe22b7e" prot="protected" virt="non-virtual"><scope>prism::containers::List</scope><name>m_size</name></member>
      <member refid="classprism_1_1containers_1_1_list_1aab976f075243f4b000e756e1434b59c8" prot="protected" virt="non-virtual"><scope>prism::containers::List</scope><name>m_tailer</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a85a6f8c9263312dfe239f739da68d542" prot="private" virt="non-virtual"><scope>prism::containers::List</scope><name>Node</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a2b348d356754ac82d81fb710e0ffe136" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator!=</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ac8c6b1c2e0692d567f4cb98be914405f" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator+</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a9ac0e1bb4dcd34666b325f8ec63bea96" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator+=</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a032dbc85b98879778aec4e369657e5c5" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator+=</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a5a0d21cc245c0021f60202f886ce0366" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a4be36f1e4e06693c7482af37c97b5783" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ade1b59b663876dff902045eb763e2abc" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator=</name></member>
      <member refid="classprism_1_1containers_1_1_list_1abe257cf1b17f602763bd0e1a4cc4d23c" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>operator==</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a93454816d3759016ad6736a21fc1892c" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>pointer</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a771d12f853d80247f8c9b10cd047da37" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>pop_back</name></member>
      <member refid="classprism_1_1containers_1_1_list_1af75089c107fc31c602ace1b60b5ddeaa" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>pop_front</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ab9f116ffab28654029ff19ec0a538ca7" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>prepend</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a54efaef0d1bc7c0f6dc3b22cb7e37c9c" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>push_back</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a0239344b13433e0fc7afb2b251fffe6f" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>push_front</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ae7c9f99dba5936d744397455c97aacde" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>reference</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a8e480351b98276da8fb71d16a7d95ae8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>removeAll</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a15a535214d35ee28ef09fafa0fcf0ce8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>removeFirst</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a7af38d1a27f700c6e5bf20cdae4866b1" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>removeFirstOf</name></member>
      <member refid="classprism_1_1containers_1_1_list_1aa7309854e3e20f12f3c0da9bd780a2b8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>removeLast</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ac85e533ea3e53efcbba0003725f15b5a" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>size</name></member>
      <member refid="classprism_1_1containers_1_1_list_1a13996f935ad746b4eef16686ade28f35" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>size_type</name></member>
      <member refid="classprism_1_1containers_1_1_list_1aed2ef7316203fb0c0308991d62b8d3ae" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>startsWith</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ac8b0490456a04d249a29c14487d310f8" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>toStdForwardList</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ab1d5e3904b183e4e450f21d8fdffa31e" prot="public" virt="non-virtual"><scope>prism::containers::List</scope><name>value_type</name></member>
      <member refid="classprism_1_1containers_1_1_list_1ade258bf5c3a96946012a3e938aa0183a" prot="public" virt="virtual"><scope>prism::containers::List</scope><name>~List</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
