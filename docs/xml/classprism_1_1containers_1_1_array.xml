<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classprism_1_1containers_1_1_array" kind="class" language="C++" prot="public">
    <compoundname>prism::containers::Array</compoundname>
    <includes refid="_array_8h" local="no">Array.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_array_1af5e3ad470f2bb2d24f0f98e12e11a60b" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_random_access_iterator" kindref="compound">RandomAccessIterator</ref>&lt; T &gt;</type>
        <definition>typedef RandomAccessIterator&lt;T&gt; prism::containers::Array&lt; T &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="30" column="1" bodyfile="inc/containers/Array.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classprism_1_1containers_1_1_array_1a9cf61ea4548f20cae51d2ddcc83f9a16" prot="public" static="no">
        <type><ref refid="classprism_1_1containers_1_1_random_access_const_iterator" kindref="compound">RandomAccessConstIterator</ref>&lt; T &gt;</type>
        <definition>typedef RandomAccessConstIterator&lt;T&gt; prism::containers::Array&lt; T &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="31" column="1" bodyfile="inc/containers/Array.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classprism_1_1containers_1_1_array_1abf4dbcf1a11bb025bd97f4f570bddd1d" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* prism::containers::Array&lt; T &gt;::m_array</definition>
        <argsstring></argsstring>
        <name>m_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="34" column="1" bodyfile="inc/containers/Array.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classprism_1_1containers_1_1_array_1ae39799c3b0dc466280878858c2787f2b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int prism::containers::Array&lt; T &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="35" column="1" bodyfile="inc/containers/Array.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ab395ce2837ab67ffb38d5d049388aa6b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Array&lt; T &gt;::Array</definition>
        <argsstring>()</argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This constructor is made private so that it cannot be called externally. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="38" column="1" bodyfile="inc/containers/Array.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a2320717d75169748d3463f6dca6845d3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Array&lt; T &gt;::allocate</definition>
        <argsstring>(const int size)</argsstring>
        <name>allocate</name>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocates enough memory for a new array of length <emphasis>size</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="39" column="1" bodyfile="inc/containers/Array.h" bodystart="134" bodyend="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ac1208a0e8b7fc1e6cb25a6af63931fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Array&lt; T &gt;::Array</definition>
        <argsstring>(const int size)</argsstring>
        <name>Array</name>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an array of size <emphasis>size</emphasis> and fills each element with default-constructed values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="41" column="1" bodyfile="inc/containers/Array.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1af8931de73694333e94471f47998b9c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Array&lt; T &gt;::Array</definition>
        <argsstring>(const int size, const T &amp;value)</argsstring>
        <name>Array</name>
        <param>
          <type>const int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an array of size <emphasis>size</emphasis> and fills each element with <emphasis>value</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="42" column="1" bodyfile="inc/containers/Array.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1af3781ba5f85a200bacbe4f3619c05d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::containers::Array&lt; T &gt;::Array</definition>
        <argsstring>(const Array&lt; T &gt; &amp;copy)</argsstring>
        <name>Array</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy-constructs this array from <emphasis>copy</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="43" column="1" bodyfile="inc/containers/Array.h" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a7baa8d313f0d531a6bfb644069380c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>prism::containers::Array&lt; T &gt;::~Array</definition>
        <argsstring>()</argsstring>
        <name>~Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes this array. User is responsible for memory pointed to by pointers if applicable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="44" column="1" bodyfile="inc/containers/Array.h" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1aeebe2b8e0e68b19fc7872d3e877ae3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Array&lt; T &gt;::at</definition>
        <argsstring>(const int index)</argsstring>
        <name>at</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the value stored in the array at the index <emphasis>i</emphasis>. This method performs bounds checking on <emphasis>i</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="46" column="1" bodyfile="inc/containers/Array.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a63758592be8559673370f9123d4790af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Array&lt; T &gt;::at</definition>
        <argsstring>(const int index) const </argsstring>
        <name>at</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the value stored in the array at the index <emphasis>i</emphasis>. This method performs bounds checking on <emphasis>i</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="47" column="1" bodyfile="inc/containers/Array.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ab38487fec3433f0ef41fec00dd21ff58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Array&lt; T &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the array. Equivalent to <ref refid="classprism_1_1containers_1_1_array_1a2f4684b738b3964abde9dae379c2ae0c" kindref="member">last()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="48" column="1" bodyfile="inc/containers/Array.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a53aaf27dd328aa4533b66b5b607e2758" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Array&lt; T &gt;::back</definition>
        <argsstring>() const </argsstring>
        <name>back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last element in the array. Equivalent to <ref refid="classprism_1_1containers_1_1_array_1a2f4684b738b3964abde9dae379c2ae0c" kindref="member">last()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="49" column="1" bodyfile="inc/containers/Array.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1aac709781c2aaf303b6c0a49a152b0e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array_1af5e3ad470f2bb2d24f0f98e12e11a60b" kindref="member">iterator</ref></type>
        <definition>Array&lt; T &gt;::iterator prism::containers::Array&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator which points to the first element in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="50" column="1" bodyfile="inc/containers/Array.h" bodystart="182" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1adb5c8e59c0cec83e0a73fe1e76cab29f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array_1a9cf61ea4548f20cae51d2ddcc83f9a16" kindref="member">const_iterator</ref></type>
        <definition>Array&lt; T &gt;::const_iterator prism::containers::Array&lt; T &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator to the first element in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="51" column="1" bodyfile="inc/containers/Array.h" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ac0a6657c6428640c26acb6e8bc86bccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array_1a9cf61ea4548f20cae51d2ddcc83f9a16" kindref="member">const_iterator</ref></type>
        <definition>Array&lt; T &gt;::const_iterator prism::containers::Array&lt; T &gt;::constBegin</definition>
        <argsstring>() const </argsstring>
        <name>constBegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator to the first element in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="52" column="1" bodyfile="inc/containers/Array.h" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1afe3570ebc6d4e4e9aaa09715a5bf1b16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * prism::containers::Array&lt; T &gt;::constData</definition>
        <argsstring>() const </argsstring>
        <name>constData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const pointer to the internal array data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="53" column="1" bodyfile="inc/containers/Array.h" bodystart="206" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a862a55f4ce9f077537fbd4abf83e1380" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array_1a9cf61ea4548f20cae51d2ddcc83f9a16" kindref="member">const_iterator</ref></type>
        <definition>Array&lt; T &gt;::const_iterator prism::containers::Array&lt; T &gt;::constEnd</definition>
        <argsstring>() const </argsstring>
        <name>constEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator to the imaginary element that follows the last element in the array. As such this should never be dereferenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="54" column="1" bodyfile="inc/containers/Array.h" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a56542c280b8fed34394a212bd906f883" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Array&lt; T &gt;::contains</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>contains</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the array contains <emphasis>value</emphasis>, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="55" column="1" bodyfile="inc/containers/Array.h" bodystart="223" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a42c2253bc3df78ec2c19e3a225a2004d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Array&lt; T &gt;::count</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>count</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of times that <emphasis>value</emphasis> appears in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="56" column="1" bodyfile="inc/containers/Array.h" bodystart="234" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a8997bf0289d0503177ced560674c3632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T * prism::containers::Array&lt; T &gt;::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the internal array data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="57" column="1" bodyfile="inc/containers/Array.h" bodystart="246" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a685e162d5720b5678b7d8fdf3aa989a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * prism::containers::Array&lt; T &gt;::data</definition>
        <argsstring>() const </argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_pointer to the internal array data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="58" column="1" bodyfile="inc/containers/Array.h" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1add6ebe81365655bfdcb144bf52e5bff9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array_1af5e3ad470f2bb2d24f0f98e12e11a60b" kindref="member">iterator</ref></type>
        <definition>Array&lt; T &gt;::iterator prism::containers::Array&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the imaginary element that follows the last element in the array. As such this should never be dereferenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="59" column="1" bodyfile="inc/containers/Array.h" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ab223ac94e2063a93f4bb8f7fe174baa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array_1a9cf61ea4548f20cae51d2ddcc83f9a16" kindref="member">const_iterator</ref></type>
        <definition>Array&lt; T &gt;::const_iterator prism::containers::Array&lt; T &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const_iterator to the imaginary element that follows the last element in the array. As such this should never be dereferenced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="60" column="1" bodyfile="inc/containers/Array.h" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a526b14c57abf816ae086b7b95e59cfb8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Array&lt; T &gt;::endsWith</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>endsWith</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the last element in the array is equal to <emphasis>value</emphasis>. The element in the array must implement <ref refid="classprism_1_1containers_1_1_array_1a2d6910b75a9dba9bc9f8cc81ddbea0e3" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="61" column="1" bodyfile="inc/containers/Array.h" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a213834cb2385d9acff60ffe3529c495d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Array&lt; T &gt;::fill</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>fill</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills each element in the array with <emphasis>value</emphasis>. User is responsible for memory of original elements if applicable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="62" column="1" bodyfile="inc/containers/Array.h" bodystart="291" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ae57abb3157c1fa3bec48dc990147d4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Array&lt; T &gt;::first</definition>
        <argsstring>()</argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="63" column="1" bodyfile="inc/containers/Array.h" bodystart="302" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ad59727b7bf01dd88df21afa1355bf3f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Array&lt; T &gt;::first</definition>
        <argsstring>() const </argsstring>
        <name>first</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the first element in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="64" column="1" bodyfile="inc/containers/Array.h" bodystart="310" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a48d68b9f2bf6bce83a6ff805fddf3fbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Array&lt; T &gt;::indexOf</definition>
        <argsstring>(const T &amp;value, const int from=0) const </argsstring>
        <name>indexOf</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>from</declname>
          <defname>index</defname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the first occurrence of <emphasis>value</emphasis> starting the search from <emphasis>index</emphasis>. If no occurrence is found, -1 is returned instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="65" column="1" bodyfile="inc/containers/Array.h" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a2f4684b738b3964abde9dae379c2ae0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Array&lt; T &gt;::last</definition>
        <argsstring>()</argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the array. Equivalent to <emphasis><ref refid="classprism_1_1containers_1_1_array_1ab38487fec3433f0ef41fec00dd21ff58" kindref="member">back()</ref></emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="66" column="1" bodyfile="inc/containers/Array.h" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a022e0872e94ecedff96f580c51a8b90c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Array&lt; T &gt;::last</definition>
        <argsstring>() const </argsstring>
        <name>last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the last element in the array. Equivalent to <emphasis><ref refid="classprism_1_1containers_1_1_array_1ab38487fec3433f0ef41fec00dd21ff58" kindref="member">back()</ref></emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="67" column="1" bodyfile="inc/containers/Array.h" bodystart="342" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a0c8864fb7d5902f4886d44d8097d6bb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Array&lt; T &gt;::lastIndexOf</definition>
        <argsstring>(const T &amp;value, const int index=-1) const </argsstring>
        <name>lastIndexOf</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the last occurrence of <emphasis>value</emphasis> searching backwards from <emphasis>index</emphasis>. If no occurrence is found then -1 is returned instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="68" column="1" bodyfile="inc/containers/Array.h" bodystart="351" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ac31e19e151e39ffbab34c35e2c1950d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Array&lt; T &gt;::length</definition>
        <argsstring>() const </argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the array. Equivalent to <ref refid="classprism_1_1containers_1_1_array_1a9f3a6d530825e137771fef3a317017fb" kindref="member">size()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="69" column="1" bodyfile="inc/containers/Array.h" bodystart="366" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1adde76ceb2ba2e8b912b237c186193dc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1containers_1_1_array" kindref="compound">Array</ref>&lt; T &gt;</type>
        <definition>Array&lt; T &gt; prism::containers::Array&lt; T &gt;::mid</definition>
        <argsstring>(const int index, const int length=-1) const </argsstring>
        <name>mid</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new array that is a subsection of this array. The new array starts from <emphasis>index</emphasis> in this array. If <emphasis>length</emphasis> is -1 then all elements after <emphasis>index</emphasis> are copied over otherwise <emphasis>length</emphasis> elements are copied instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="70" column="1" bodyfile="inc/containers/Array.h" bodystart="375" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a0b6bafa4ff9a524ed47aa86e76b04482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::containers::Array&lt; T &gt;::replace</definition>
        <argsstring>(const int index, const T &amp;value)</argsstring>
        <name>replace</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replaces the value of the element currently stored at <emphasis>index</emphasis> with <emphasis>value</emphasis>. The user is responsible for memory deallocation if necessary of the element being replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="71" column="1" bodyfile="inc/containers/Array.h" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a9f3a6d530825e137771fef3a317017fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int prism::containers::Array&lt; T &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the array. Equivalent to <ref refid="classprism_1_1containers_1_1_array_1ac31e19e151e39ffbab34c35e2c1950d5" kindref="member">length()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="72" column="1" bodyfile="inc/containers/Array.h" bodystart="403" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a2c00ed6fb1ead0e856056a2a32b3fb8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Array&lt; T &gt;::startsWith</definition>
        <argsstring>(const T &amp;value) const </argsstring>
        <name>startsWith</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the first element in the array is equal to <emphasis>value</emphasis>. The element in the array must implement <ref refid="classprism_1_1containers_1_1_array_1a2d6910b75a9dba9bc9f8cc81ddbea0e3" kindref="member">operator==()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="73" column="1" bodyfile="inc/containers/Array.h" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a6fac700f89e79bd35f5c431dda5ad30f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T prism::containers::Array&lt; T &gt;::value</definition>
        <argsstring>(const int index) const </argsstring>
        <name>value</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the value stored at <emphasis>index</emphasis> in the array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="74" column="1" bodyfile="inc/containers/Array.h" bodystart="421" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1ada9e95c663e0665ee0ab0ba9cd129c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; prism::containers::Array&lt; T &gt;::operator[]</definition>
        <argsstring>(const int index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element stored at <emphasis>index</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="76" column="1" bodyfile="inc/containers/Array.h" bodystart="430" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1aa5e0a27af6b3b5e201bf99fd15e248a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; prism::containers::Array&lt; T &gt;::operator[]</definition>
        <argsstring>(const int index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element stored at <emphasis>index</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="77" column="1" bodyfile="inc/containers/Array.h" bodystart="438" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a2d6910b75a9dba9bc9f8cc81ddbea0e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Array&lt; T &gt;::operator==</definition>
        <argsstring>(const Array&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this array with <emphasis>rhs</emphasis> to see if they are equal to each other. They are considered equal if they have the same length and the same values in the same order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="78" column="1" bodyfile="inc/containers/Array.h" bodystart="447" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1containers_1_1_array_1a84e96ff629ea62cca32f655ad272fc0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::containers::Array&lt; T &gt;::operator!=</definition>
        <argsstring>(const Array&lt; T &gt; &amp;rhs) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares this array with <emphasis>rhs</emphasis> to see if they are not equal to each other. They are considered equal if they have the same length and the same values in the same order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="79" column="1" bodyfile="inc/containers/Array.h" bodystart="463" bodyend="465"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/containers/Array.h" line="28" column="1" bodyfile="inc/containers/Array.h" bodystart="28" bodyend="80"/>
    <listofallmembers>
      <member refid="classprism_1_1containers_1_1_array_1a2320717d75169748d3463f6dca6845d3" prot="private" virt="non-virtual"><scope>prism::containers::Array</scope><name>allocate</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ab395ce2837ab67ffb38d5d049388aa6b" prot="private" virt="non-virtual"><scope>prism::containers::Array</scope><name>Array</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ac1208a0e8b7fc1e6cb25a6af63931fe8" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>Array</name></member>
      <member refid="classprism_1_1containers_1_1_array_1af8931de73694333e94471f47998b9c8a" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>Array</name></member>
      <member refid="classprism_1_1containers_1_1_array_1af3781ba5f85a200bacbe4f3619c05d68" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>Array</name></member>
      <member refid="classprism_1_1containers_1_1_array_1aeebe2b8e0e68b19fc7872d3e877ae3f4" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>at</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a63758592be8559673370f9123d4790af" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>at</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ab38487fec3433f0ef41fec00dd21ff58" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>back</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a53aaf27dd328aa4533b66b5b607e2758" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>back</name></member>
      <member refid="classprism_1_1containers_1_1_array_1aac709781c2aaf303b6c0a49a152b0e71" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>begin</name></member>
      <member refid="classprism_1_1containers_1_1_array_1adb5c8e59c0cec83e0a73fe1e76cab29f" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>begin</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a9cf61ea4548f20cae51d2ddcc83f9a16" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>const_iterator</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ac0a6657c6428640c26acb6e8bc86bccb" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>constBegin</name></member>
      <member refid="classprism_1_1containers_1_1_array_1afe3570ebc6d4e4e9aaa09715a5bf1b16" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>constData</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a862a55f4ce9f077537fbd4abf83e1380" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>constEnd</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a56542c280b8fed34394a212bd906f883" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>contains</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a42c2253bc3df78ec2c19e3a225a2004d" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>count</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a8997bf0289d0503177ced560674c3632" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>data</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a685e162d5720b5678b7d8fdf3aa989a1" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>data</name></member>
      <member refid="classprism_1_1containers_1_1_array_1add6ebe81365655bfdcb144bf52e5bff9" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>end</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ab223ac94e2063a93f4bb8f7fe174baa9" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>end</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a526b14c57abf816ae086b7b95e59cfb8" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>endsWith</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a213834cb2385d9acff60ffe3529c495d" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>fill</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ae57abb3157c1fa3bec48dc990147d4a0" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>first</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ad59727b7bf01dd88df21afa1355bf3f0" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>first</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a48d68b9f2bf6bce83a6ff805fddf3fbf" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>indexOf</name></member>
      <member refid="classprism_1_1containers_1_1_array_1af5e3ad470f2bb2d24f0f98e12e11a60b" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>iterator</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a2f4684b738b3964abde9dae379c2ae0c" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>last</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a022e0872e94ecedff96f580c51a8b90c" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>last</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a0c8864fb7d5902f4886d44d8097d6bb9" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>lastIndexOf</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ac31e19e151e39ffbab34c35e2c1950d5" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>length</name></member>
      <member refid="classprism_1_1containers_1_1_array_1abf4dbcf1a11bb025bd97f4f570bddd1d" prot="private" virt="non-virtual"><scope>prism::containers::Array</scope><name>m_array</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ae39799c3b0dc466280878858c2787f2b" prot="private" virt="non-virtual"><scope>prism::containers::Array</scope><name>m_size</name></member>
      <member refid="classprism_1_1containers_1_1_array_1adde76ceb2ba2e8b912b237c186193dc8" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>mid</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a84e96ff629ea62cca32f655ad272fc0c" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>operator!=</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a2d6910b75a9dba9bc9f8cc81ddbea0e3" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>operator==</name></member>
      <member refid="classprism_1_1containers_1_1_array_1ada9e95c663e0665ee0ab0ba9cd129c8b" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>operator[]</name></member>
      <member refid="classprism_1_1containers_1_1_array_1aa5e0a27af6b3b5e201bf99fd15e248a8" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>operator[]</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a0b6bafa4ff9a524ed47aa86e76b04482" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>replace</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a9f3a6d530825e137771fef3a317017fb" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>size</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a2c00ed6fb1ead0e856056a2a32b3fb8b" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>startsWith</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a6fac700f89e79bd35f5c431dda5ad30f" prot="public" virt="non-virtual"><scope>prism::containers::Array</scope><name>value</name></member>
      <member refid="classprism_1_1containers_1_1_array_1a7baa8d313f0d531a6bfb644069380c6b" prot="public" virt="virtual"><scope>prism::containers::Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
