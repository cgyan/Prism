<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classprism_1_1geometry_1_1_matrix4" kind="class" language="C++" prot="public">
    <compoundname>prism::geometry::Matrix4</compoundname>
    <includes refid="_matrix4_8h" local="no">Matrix4.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classprism_1_1geometry_1_1_matrix4_1a44a0a53c84524081b622bf90fe09cebd" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float prism::geometry::Matrix4::m_data[16]</definition>
        <argsstring>[16]</argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="14" column="1" bodyfile="inc/geometry/Matrix4.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a59e58127677eec56304135cae6beb531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::geometry::Matrix4::Matrix4</definition>
        <argsstring>(void)</argsstring>
        <name>Matrix4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inits with a &apos;default&apos; identity matrix.</para><para>[1 0 0 0] [0 1 0 0] [0 0 1 0] [0 0 0 1] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="17" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a4901303fd12c9356a7796b876f5bb66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::geometry::Matrix4::Matrix4</definition>
        <argsstring>(const float *values)</argsstring>
        <name>Matrix4</name>
        <param>
          <type>const float *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a matrix from the pointer to the sixteen floating-point values passed in. It is assumed that &apos;values&apos; is in a row-major order.</para><para>[m1 m2 m3 m4 ] [m5 m6 m7 m8 ] [m9 m10 m11 m12] [m13 m14 m15 m16] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="18" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a03d3bd902689df5e7da131b9a12a5fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::geometry::Matrix4::Matrix4</definition>
        <argsstring>(const float r1c1, const float r1c2, const float r1c3, const float r1c4, const float r2c1, const float r2c2, const float r2c3, const float r2c4, const float r3c1, const float r3c2, const float r3c3, const float r3c4, const float r4c1, const float r4c2, const float r4c3, const float r4c4)</argsstring>
        <name>Matrix4</name>
        <param>
          <type>const float</type>
          <declname>r1c1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r1c2</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r1c3</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r1c4</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r2c1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r2c2</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r2c3</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r2c4</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r3c1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r3c2</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r3c3</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r3c4</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r4c1</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r4c2</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r4c3</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>r4c4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a matrix from the sixteen floating-point values passed in. It is assumed that the values are in row-major order.</para><para>[m1 m2 m3 m4 ] [m5 m6 m7 m8 ] [m9 m10 m11 m12] [m13 m14 m15 m16] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="19" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="51" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a7503afdc5252c5d664fb1848126c4c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>prism::geometry::Matrix4::Matrix4</definition>
        <argsstring>(const Matrix4 &amp;copy)</argsstring>
        <name>Matrix4</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor Simply copies the data array from copy to this matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="23" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a8d2880084113509726be0ab7a3b60ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>prism::geometry::Matrix4::~Matrix4</definition>
        <argsstring>(void)</argsstring>
        <name>~Matrix4</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="24" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a8ad13bf4841dd97f0a49f9587c509845" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref></type>
        <definition>Vector4 prism::geometry::Matrix4::column</definition>
        <argsstring>(const int index) const </argsstring>
        <name>column</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a Vector 4 that is composed from the column specified by index from this matrix. The index is zero-based so an index of 0 retrieves the first column and an index of 3 retrieves the last column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="26" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1ac6e44aa8ca27411a4d924a8daaffd5cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float *</type>
        <definition>const float * prism::geometry::Matrix4::constData</definition>
        <argsstring>() const </argsstring>
        <name>constData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a constant pointer to the raw data of this matrix. The data is in column-major order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="27" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a23ecfb0202dcfbafdca5fb5dd067c487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::copyDataTo</definition>
        <argsstring>(float *destMatrix)</argsstring>
        <name>copyDataTo</name>
        <param>
          <type>float *</type>
          <declname>destMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copies the raw data from this matrix and populates the supplied matrix with that data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="28" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a48a4d24318eea0510ae8b46888d335dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * prism::geometry::Matrix4::data</definition>
        <argsstring>()</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer to the raw data of this matrix. The data is in column-major order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="29" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a7fcc3058850a6a412b2ee950bf972fe6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float</type>
        <definition>const float prism::geometry::Matrix4::determinant</definition>
        <argsstring>() const </argsstring>
        <name>determinant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a single number which is the determinant of this matrix. One use for the determinant is if the determinant is 0 then this matrix is not invertible i.e. <ref refid="classprism_1_1geometry_1_1_matrix4_1abe27f85ed73f720845384d1c4f58a6ad" kindref="member">hasInverse()</ref> is false whereas if it is non-zero then it is invertible. This implementation multiplies each element in the first row of the matrix by its corresponding cofactor and sums them together to produce the determinant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="30" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="124" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1ad3190f5200f03b0799c6a7e6ec7495ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::fill</definition>
        <argsstring>(const float value)</argsstring>
        <name>fill</name>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills each element of the matrix with the specified value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="31" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1abe27f85ed73f720845384d1c4f58a6ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::geometry::Matrix4::hasInverse</definition>
        <argsstring>() const </argsstring>
        <name>hasInverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this matrix has an inverse and false if not. The method used is to calculate the determinant of the matrix first. If the determinant is 0 then the matrix does not have an inverse. If the determinant is non-zero then it does have an inverse. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="32" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a6f5b787a096b2d7bf24201a9ad973373" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 prism::geometry::Matrix4::inverted</definition>
        <argsstring>() const </argsstring>
        <name>inverted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="33" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="167" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1af40d2f75c6cc7b76fc31f8b9b0a418c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const bool</type>
        <definition>const bool prism::geometry::Matrix4::isIdentity</definition>
        <argsstring>() const </argsstring>
        <name>isIdentity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if this matrix is in the identity form, returns true if it is and false if not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="34" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="302" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1ab705bf4843e9966cf3825bce2c14c2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::rotate</definition>
        <argsstring>(Vector3 &amp;axis, const float degrees)</argsstring>
        <name>rotate</name>
        <param>
          <type><ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref> that represents the axis of rotation should be normalised but if it isn&apos;t this method does it for you. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="35" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="326" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a0ff6e10941c4da2f602c39fea1de1d1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::rotate</definition>
        <argsstring>(const float xAxis, const float yAxis, const float zAxis, const float degrees)</argsstring>
        <name>rotate</name>
        <param>
          <type>const float</type>
          <declname>xAxis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>yAxis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>zAxis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>degrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="36" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1ad86ea7ce40789f10cafa0ec56403f0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref></type>
        <definition>Vector4 prism::geometry::Matrix4::row</definition>
        <argsstring>(const int index) const </argsstring>
        <name>row</name>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a Vector 4 that is composed from the row specified by index from this matrix. The index is zero-based so an index of 0 retrieves the first row and an index of 3 retrieves the last row. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="37" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="368" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a948f106919d3d4f36313065e476e5881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::scale</definition>
        <argsstring>(const float factor)</argsstring>
        <name>scale</name>
        <param>
          <type>const float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies this matrix by another matrix that scales this matrix by factor. i.e. if this matrix is M and the scaling matrix is S, then the raw data of this matrix is set to MS. Note: each subsequent call to <ref refid="classprism_1_1geometry_1_1_matrix4_1a948f106919d3d4f36313065e476e5881" kindref="member">scale()</ref> builds on top of the last transformation. So, initially scale(2) scales the matrix to [2], then if called again, say, scale(5) then the resulting scaling transformation becomes [10]. To actually scale a matrix to a given size call <ref refid="classprism_1_1geometry_1_1_matrix4_1ab887190e2fe938bc38f3f269afb39a40" kindref="member">setIdentity()</ref> first which resets the matrix and then call scale(*). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="38" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="409" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1ab6ae470e439f1dac65b1dd959d57f0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::scale</definition>
        <argsstring>(const float x, const float y, const float z=1)</argsstring>
        <name>scale</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies this matrix by another matrix that scales this matrix by x, y and z. i.e. if this matrix is M and the scaling matrix is S, then the raw data of this matrix is set to MS. Note: each subsequent call to <ref refid="classprism_1_1geometry_1_1_matrix4_1a948f106919d3d4f36313065e476e5881" kindref="member">scale()</ref> builds on top of the last transformation. So, initially scale(2,2) scales the matrix to [2,2], then if called again, say, scale(5,5) then the resulting scaling transformation becomes [10,10]. To actually scale a matrix to a given size call <ref refid="classprism_1_1geometry_1_1_matrix4_1ab887190e2fe938bc38f3f269afb39a40" kindref="member">setIdentity()</ref> first which resets the matrix and then call scale(*,*). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="39" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="423" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a69ba7264fbe5b126f0bd717502b42b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::setColumn</definition>
        <argsstring>(const int col, const Vector4 &amp;vec)</argsstring>
        <name>setColumn</name>
        <param>
          <type>const int</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref> &amp;</type>
          <declname>vec</declname>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the specified column of this matrix using the values of vector v. The col is zero-based so col 0 is the first column and col 3 is the last column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="40" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="439" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a4ae5f6bd53f9165099b2fc1124c1fd8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::setRow</definition>
        <argsstring>(const int row, const Vector4 &amp;vec)</argsstring>
        <name>setRow</name>
        <param>
          <type>const int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref> &amp;</type>
          <declname>vec</declname>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the specified row of this matrix using the values of vector v. The row is zero-based so row 0 is the first row and row 3 is the last row. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="41" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="450" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1ab887190e2fe938bc38f3f269afb39a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::setIdentity</definition>
        <argsstring>()</argsstring>
        <name>setIdentity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets this matrix to the identity matrix. [1 0 0 0] [0 1 0 0] [0 0 1 0] [0 0 0 1] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="42" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="464" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1abcaa8435644688b260ff35c40e94e811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::translate</definition>
        <argsstring>(const float x, const float y, const float z=0)</argsstring>
        <name>translate</name>
        <param>
          <type>const float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>z</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies this matrix by another matrix that translates this matrix by the floats x, y and z. i.e. if this matrix is M and the translation matrix is T, then the raw data of this matrix is set to MT. Note: each subsequent call to <ref refid="classprism_1_1geometry_1_1_matrix4_1abcaa8435644688b260ff35c40e94e811" kindref="member">translate()</ref> builds on top of the last transformation. So, initially translate(5,5,5) translates the matrix to [5,5,5], then if called again, say, translate(15,15,15) then the resulting translating transformation becomes [20,20,20]. To actually place a matrix at a given location call <ref refid="classprism_1_1geometry_1_1_matrix4_1ab887190e2fe938bc38f3f269afb39a40" kindref="member">setIdentity()</ref> first which resets the matrix and then call translate(*,*,*). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="43" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="485" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a866ecddb26c6e64e12aa826595a47fb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 prism::geometry::Matrix4::transposed</definition>
        <argsstring>() const </argsstring>
        <name>transposed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new matrix which is a copy of this matrix that has been transposed across its diagonal. This matrix remains unaltered, however. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="44" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="502" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a1307c1b49b75509880af85ddcc8585dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float &amp;</type>
        <definition>float &amp; prism::geometry::Matrix4::operator()</definition>
        <argsstring>(const int row, const int col)</argsstring>
        <name>operator()</name>
        <param>
          <type>const int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element located at (row, col) in the matrix. row and col are zero based so (0,0) is the first element and (3,3) is the last element. This just provides easy access to directly modify the internal matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="46" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="530" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a3930862eadea631f7b501155b6342531" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const float &amp;</type>
        <definition>const float &amp; prism::geometry::Matrix4::operator()</definition>
        <argsstring>(const int row, const int col) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const int</type>
          <declname>row</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a constant reference to the element located at (row, col) in the matrix. row and col are zero based so (0,0) is the first element and (3,3) is the last element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="47" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="539" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a83d285e8458d7e9bfd4b952cf07388ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
        <definition>Matrix4 &amp; prism::geometry::Matrix4::operator=</definition>
        <argsstring>(const Matrix4 &amp;copy)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overloaded assignment operator - copies the data array from copy to this matrix. A quick check prevents a matrix being assigned to to itself which is dangerous if dynamic memory is involved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="48" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="548" bodyend="553"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1afc2bce19b13471f0cac1a48c2932af60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator+</definition>
        <argsstring>(const Matrix4 &amp;m1, const Matrix4 &amp;m2)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> which is the sum of m1 and m2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="52" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="561" bodyend="570"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a2e7720348e3d34cad4119b93c499971e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator-</definition>
        <argsstring>(const Matrix4 &amp;m1, const Matrix4 &amp;m2)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> which is the result of subtracting m2 from m1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="53" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="575" bodyend="584"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a9d189e964a989207c8489e80276dadd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator-</definition>
        <argsstring>(const Matrix4 &amp;m)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> where each component of matrix m has been negated (multiplyed by -1). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="54" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="589" bodyend="598"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1af33d4af5371e50d645cd647e02912f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator*</definition>
        <argsstring>(const Matrix4 &amp;m1, const Matrix4 &amp;m2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> that is the product of m1 and m2 i.e. m1m2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="55" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="602" bodyend="609"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1aefe58d9157e2f7ac266b357a5db4e986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator*</definition>
        <argsstring>(const float factor, const Matrix4 &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float</type>
          <declname>factor</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> where each component of m is multiplied by factor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="56" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="614" bodyend="623"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1aeec24c93fae98db6ade9c1dd738ef3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator*</definition>
        <argsstring>(const Matrix4 &amp;m, const float factor)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> where each component of m is multiplied by factor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="57" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="628" bodyend="637"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a023b29b55ee669aa94f8bbc9131923ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator*</definition>
        <argsstring>(const Matrix4 &amp;m1, const float *m2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> that is the result of multiplying a <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> with a float array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="58" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="642" bodyend="649"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a26ce7e4aed9bc5780ebb8411acce6583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator*</definition>
        <argsstring>(const float *m1, const Matrix4 &amp;m2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const float *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> that is the result of multiplying a <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> with a float array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="59" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="654" bodyend="656"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1ada37b2462427325427c6503a1a370d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 operator*</definition>
        <argsstring>(const Vector3 &amp;v, const Matrix4 &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref> which has been transformed by the matrix M in the order of vM. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="60" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="661" bodyend="664"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1acb4d5cf5c35ead4ac8d2713d32a3bb53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref></type>
        <definition>Vector3 operator*</definition>
        <argsstring>(const Matrix4 &amp;m, const Vector3 &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_vector3" kindref="compound">Vector3</ref> which has been transformed by the matrix M in the order of Mv. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="61" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="669" bodyend="672"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a8f72f1280f8f44f2f85c32e930ef95f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref></type>
        <definition>Vector4 operator*</definition>
        <argsstring>(const Vector4 &amp;v, const Matrix4 &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref> which has been transformed by the matrix M in the order of vM. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="62" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="677" bodyend="687"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a20a9788aba6ec37d10a0c04fa479b26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref></type>
        <definition>Vector4 operator*</definition>
        <argsstring>(const Matrix4 &amp;m, const Vector4 &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_vector4" kindref="compound">Vector4</ref> which has been transformed by the matrix M in the order of Mv. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="63" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="692" bodyend="701"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a00876fb2e95ed93d05c590a941d2c3a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_point" kindref="compound">Point</ref></type>
        <definition>Point operator*</definition>
        <argsstring>(const Point &amp;p, const Matrix4 &amp;m)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_point" kindref="compound">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_point" kindref="compound">Point</ref> which has been transformed by the matrix m in the order of pM </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="64" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="706" bodyend="710"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a67263983148d3a3593ebc84eae31c87a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_point" kindref="compound">Point</ref></type>
        <definition>Point operator*</definition>
        <argsstring>(const Matrix4 &amp;m, const Point &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_point" kindref="compound">Point</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classprism_1_1geometry_1_1_point" kindref="compound">Point</ref> which has been transformed by the matrix M in the order of Mp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="65" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="715" bodyend="719"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a9370aa111e71140fdd85f3e055a26cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref></type>
        <definition>Matrix4 operator/</definition>
        <argsstring>(const Matrix4 &amp;m, const float divisor)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> where each component of matrix m is divided by divisor. If divisor is 0 a new <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> is returned set to the identity matrix instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="66" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="725" bodyend="735"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a0cbf3c575d1951cc9ae4dfe79c3a3729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend const bool</type>
        <definition>const bool operator==</definition>
        <argsstring>(const Matrix4 &amp;m1, const Matrix4 &amp;m2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares the elements of the two matrices and returns true if they contain the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="67" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="741" bodyend="751"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1aaedc2ff7fd572ebc03eec59fb11cd5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend const bool</type>
        <definition>const bool operator!=</definition>
        <argsstring>(const Matrix4 &amp;m1, const Matrix4 &amp;m2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compares the elements of the two matrices and returns true if they don&apos;t contain the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="68" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="757" bodyend="767"/>
      </memberdef>
      <memberdef kind="friend" id="classprism_1_1geometry_1_1_matrix4_1a4ccbb04098ce491412da339e07eb72d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Matrix4 &amp;matrix)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows an instance of Matrx4x4 to be written to the ostream out and returns a reference to the ostream. i.e. std::cout &lt;&lt; matrix &lt;&lt; std::endl; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="69" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="773" bodyend="782"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1a5fa433125bd309085ec3272dd7627433" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::copyDataFromSourceToDestination</definition>
        <argsstring>(const float *sourceMatrix, float *destinationMatrix)</argsstring>
        <name>copyDataFromSourceToDestination</name>
        <param>
          <type>const float *</type>
          <declname>sourceMatrix</declname>
          <defname>source</defname>
        </param>
        <param>
          <type>float *</type>
          <declname>destinationMatrix</declname>
          <defname>destination</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Very simply copies the elements from source matrix to destination matrix one by one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="72" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="787" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classprism_1_1geometry_1_1_matrix4_1aa561528a9f59f76b47035346e64f72f6" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void prism::geometry::Matrix4::multiplyMatrices</definition>
        <argsstring>(const float *a, const float *b, float *ab) const </argsstring>
        <name>multiplyMatrices</name>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>ab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiples float array matrices a and b together, in that order, the result of which is stored in the float array ab. This method specifically multiplies the raw data matrices rather than the object <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> type. That can be done instead easily with the * operator i.e. <ref refid="classprism_1_1geometry_1_1_matrix4" kindref="compound">Matrix4</ref> m_4x4 = m1_4x4 * m2_4x4 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/geometry/Matrix4.h" line="73" column="1" bodyfile="src/geometry/Matrix4.cpp" bodystart="798" bodyend="820"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/geometry/Matrix4.h" line="12" column="1" bodyfile="inc/geometry/Matrix4.h" bodystart="11" bodyend="74"/>
    <listofallmembers>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a8ad13bf4841dd97f0a49f9587c509845" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>column</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ac6e44aa8ca27411a4d924a8daaffd5cb" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>constData</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a5fa433125bd309085ec3272dd7627433" prot="private" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>copyDataFromSourceToDestination</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a23ecfb0202dcfbafdca5fb5dd067c487" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>copyDataTo</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a48a4d24318eea0510ae8b46888d335dd" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>data</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a7fcc3058850a6a412b2ee950bf972fe6" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>determinant</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ad3190f5200f03b0799c6a7e6ec7495ab" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>fill</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1abe27f85ed73f720845384d1c4f58a6ad" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>hasInverse</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a6f5b787a096b2d7bf24201a9ad973373" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>inverted</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1af40d2f75c6cc7b76fc31f8b9b0a418c7" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>isIdentity</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a44a0a53c84524081b622bf90fe09cebd" prot="private" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>m_data</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a59e58127677eec56304135cae6beb531" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>Matrix4</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a4901303fd12c9356a7796b876f5bb66f" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>Matrix4</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a03d3bd902689df5e7da131b9a12a5fcf" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>Matrix4</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a7503afdc5252c5d664fb1848126c4c72" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>Matrix4</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1aa561528a9f59f76b47035346e64f72f6" prot="private" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>multiplyMatrices</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1aaedc2ff7fd572ebc03eec59fb11cd5a9" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator!=</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a1307c1b49b75509880af85ddcc8585dd" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator()</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a3930862eadea631f7b501155b6342531" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator()</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1af33d4af5371e50d645cd647e02912f28" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1aefe58d9157e2f7ac266b357a5db4e986" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1aeec24c93fae98db6ade9c1dd738ef3e7" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a023b29b55ee669aa94f8bbc9131923ce" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a26ce7e4aed9bc5780ebb8411acce6583" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ada37b2462427325427c6503a1a370d40" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1acb4d5cf5c35ead4ac8d2713d32a3bb53" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a8f72f1280f8f44f2f85c32e930ef95f1" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a20a9788aba6ec37d10a0c04fa479b26e" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a00876fb2e95ed93d05c590a941d2c3a3" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a67263983148d3a3593ebc84eae31c87a" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator*</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1afc2bce19b13471f0cac1a48c2932af60" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator+</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a2e7720348e3d34cad4119b93c499971e" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator-</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a9d189e964a989207c8489e80276dadd4" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator-</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a9370aa111e71140fdd85f3e055a26cbd" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator/</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a4ccbb04098ce491412da339e07eb72d7" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator&lt;&lt;</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a83d285e8458d7e9bfd4b952cf07388ab" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator=</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a0cbf3c575d1951cc9ae4dfe79c3a3729" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>operator==</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ab705bf4843e9966cf3825bce2c14c2f8" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>rotate</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a0ff6e10941c4da2f602c39fea1de1d1b" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>rotate</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ad86ea7ce40789f10cafa0ec56403f0fd" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>row</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a948f106919d3d4f36313065e476e5881" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>scale</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ab6ae470e439f1dac65b1dd959d57f0c5" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>scale</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a69ba7264fbe5b126f0bd717502b42b87" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>setColumn</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1ab887190e2fe938bc38f3f269afb39a40" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>setIdentity</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a4ae5f6bd53f9165099b2fc1124c1fd8e" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>setRow</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1abcaa8435644688b260ff35c40e94e811" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>translate</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a866ecddb26c6e64e12aa826595a47fb2" prot="public" virt="non-virtual"><scope>prism::geometry::Matrix4</scope><name>transposed</name></member>
      <member refid="classprism_1_1geometry_1_1_matrix4_1a8d2880084113509726be0ab7a3b60ee7" prot="public" virt="virtual"><scope>prism::geometry::Matrix4</scope><name>~Matrix4</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
