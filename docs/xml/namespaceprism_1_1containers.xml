<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceprism_1_1containers" kind="namespace" language="C++">
    <compoundname>prism::containers</compoundname>
    <innerclass refid="classprism_1_1containers_1_1_array" prot="public">prism::containers::Array</innerclass>
    <innerclass refid="structprism_1_1containers_1_1bidirectional__iterator__tag" prot="public">prism::containers::bidirectional_iterator_tag</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_bidirectional_const_iterator" prot="public">prism::containers::BidirectionalConstIterator</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_bidirectional_iterator" prot="public">prism::containers::BidirectionalIterator</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_deque" prot="public">prism::containers::Deque</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_deque_const_iterator" prot="public">prism::containers::DequeConstIterator</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_deque_data" prot="public">prism::containers::DequeData</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_deque_impl" prot="public">prism::containers::DequeImpl</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_deque_iterator" prot="public">prism::containers::DequeIterator</innerclass>
    <innerclass refid="structprism_1_1containers_1_1forward__iterator__tag" prot="public">prism::containers::forward_iterator_tag</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_forward_const_iterator" prot="public">prism::containers::ForwardConstIterator</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_forward_iterator" prot="public">prism::containers::ForwardIterator</innerclass>
    <innerclass refid="structprism_1_1containers_1_1input__iterator__tag" prot="public">prism::containers::input_iterator_tag</innerclass>
    <innerclass refid="structprism_1_1containers_1_1iterator__traits" prot="public">prism::containers::iterator_traits</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_list" prot="public">prism::containers::List</innerclass>
    <innerclass refid="structprism_1_1containers_1_1_list_const_iterator" prot="public">prism::containers::ListConstIterator</innerclass>
    <innerclass refid="structprism_1_1containers_1_1_list_iterator" prot="public">prism::containers::ListIterator</innerclass>
    <innerclass refid="structprism_1_1containers_1_1_list_node" prot="public">prism::containers::ListNode</innerclass>
    <innerclass refid="structprism_1_1containers_1_1output__iterator__tag" prot="public">prism::containers::output_iterator_tag</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_queue" prot="public">prism::containers::Queue</innerclass>
    <innerclass refid="structprism_1_1containers_1_1random__access__iterator__tag" prot="public">prism::containers::random_access_iterator_tag</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_random_access_const_iterator" prot="public">prism::containers::RandomAccessConstIterator</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_random_access_iterator" prot="public">prism::containers::RandomAccessIterator</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_stack" prot="public">prism::containers::Stack</innerclass>
    <innerclass refid="classprism_1_1containers_1_1_vector" prot="public">prism::containers::Vector</innerclass>
    <innerclass refid="structprism_1_1containers_1_1_vector_data" prot="public">prism::containers::VectorData</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceprism_1_1containers_1a5af8912cd6946c5813074cb9e140c198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; prism::containers::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Array&lt; T &gt; &amp;array)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_array" kindref="compound">Array</ref>&lt; T &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Array.h" line="471" column="1" bodyfile="inc/containers/Array.h" bodystart="471" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a830959d857ca44ed52f1afa2dcec4554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const int</type>
        <definition>const int prism::containers::operator-</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="214" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="214" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1aac86b224a4802c7e44965e42b4dee00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator==</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="227" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a5abaf172467c15dd1624c3de7c65d3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator!=</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="235" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1aa0e7be99ec6ca8c3290de365093efd56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&lt;</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="243" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a82774d71dc461e7db2a576a14aca9b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&gt;</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="256" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a3970e468aaad7eaa0f011b2b2c73bbd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
          <param>
            <type>class _Ref</type>
          </param>
          <param>
            <type>class _Ptr</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&lt;=</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="264" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a991e08d63880a130ae76ff43a2af29af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&gt;=</definition>
        <argsstring>(const DequeIterator&lt; _T &gt; &amp;lhs, const DequeIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_iterator" kindref="compound">DequeIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="272" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="272" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a2160699645a4ae5dcf6695aec7af3065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const int</type>
        <definition>const int prism::containers::operator-</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="478" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="478" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a63c7f6ac798e1ef599acac6c3b4e5f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator==</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="491" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="491" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a8f010b4cf1c5f7428c3378cd554a5446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator!=</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="499" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="499" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a5a06ea40224e51b14345103b2d536d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&lt;</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="507" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="507" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a9841f42f2958e4778876d94b06a36a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&gt;</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="520" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="520" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a111194dc0384fbb2d11c1ccf92aedc41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
          <param>
            <type>class _Ref</type>
          </param>
          <param>
            <type>class _Ptr</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&lt;=</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="528" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="528" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1a26b87bb6c1c5befc4445a785a32e5185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::containers::operator&gt;=</definition>
        <argsstring>(const DequeConstIterator&lt; _T &gt; &amp;lhs, const DequeConstIterator&lt; _T &gt; &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_deque_const_iterator" kindref="compound">DequeConstIterator</ref>&lt; _T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/aux/_DequeIterator.h" line="536" column="1" bodyfile="inc/containers/aux/_DequeIterator.h" bodystart="536" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1aee5e272642ba66c221b1d4f0d3c4c5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class _T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; prism::containers::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Deque&lt; _T &gt; &amp;deque)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classprism_1_1containers_1_1_deque" kindref="compound">Deque</ref>&lt; _T &gt; &amp;</type>
          <declname>deque</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/Deque.h" line="218" column="1" bodyfile="inc/containers/Deque.h" bodystart="218" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1containers_1af644f522d64d58d29416ac4387f4aadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; prism::containers::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const List&lt; T &gt; &amp;list)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1containers_1_1_list" kindref="compound">List</ref>&lt; T &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Outputs a human-friendly summary of <emphasis>list</emphasis> to the stream <emphasis>out</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/containers/List.h" line="639" column="1" bodyfile="inc/containers/List.h" bodystart="639" bodyend="656"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/containers/Array.h" line="25" column="1"/>
  </compounddef>
</doxygen>
