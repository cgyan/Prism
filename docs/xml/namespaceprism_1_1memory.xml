<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceprism_1_1memory" kind="namespace" language="C++">
    <compoundname>prism::memory</compoundname>
    <innerclass refid="classprism_1_1memory_1_1_reference_counter" prot="public">prism::memory::ReferenceCounter</innerclass>
    <innerclass refid="classprism_1_1memory_1_1_shared_data" prot="public">prism::memory::SharedData</innerclass>
    <innerclass refid="classprism_1_1memory_1_1_shared_data_pointer" prot="public">prism::memory::SharedDataPointer</innerclass>
    <innerclass refid="classprism_1_1memory_1_1_shared_pointer" prot="public">prism::memory::SharedPointer</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceprism_1_1memory_1ad36b37a525404c17827d12d0bf94bafd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::memory::operator!=</definition>
        <argsstring>(const SharedPointer&lt; U &gt; &amp;p1, const SharedPointer&lt; U &gt; &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the managed pointers of p1 and p2 do not point to the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/memory/SharedPointer.h" line="193" column="1" bodyfile="inc/memory/SharedPointer.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1memory_1a96fb8161e2fb235063aad1597f1e9308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::memory::operator!=</definition>
        <argsstring>(const SharedPointer&lt; U &gt; &amp;p1, const U *p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the managed pointer of p1 and the raw pointer p2 do not point to the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/memory/SharedPointer.h" line="201" column="1" bodyfile="inc/memory/SharedPointer.h" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1memory_1aa8bd4c5e7758c889a6d5bf59bceacd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::memory::operator!=</definition>
        <argsstring>(const U *p1, const SharedPointer&lt; U &gt; &amp;p2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const U *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the raw pointer p1 and the managed pointer of p2 do not point to the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/memory/SharedPointer.h" line="209" column="1" bodyfile="inc/memory/SharedPointer.h" bodystart="209" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1memory_1a5c9e5536158a5a55c58650ee25b579e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::memory::operator==</definition>
        <argsstring>(const SharedPointer&lt; U &gt; &amp;p1, const SharedPointer&lt; U &gt; &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the managed pointers of p1 and p2 point to the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/memory/SharedPointer.h" line="217" column="1" bodyfile="inc/memory/SharedPointer.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1memory_1aa56d131347659ff3d6740a577a838051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::memory::operator==</definition>
        <argsstring>(const SharedPointer&lt; U &gt; &amp;p1, const U *p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the managed pointer of p1 and the raw pointer p2 point to the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/memory/SharedPointer.h" line="225" column="1" bodyfile="inc/memory/SharedPointer.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceprism_1_1memory_1a202ce193aab3b8867cffa74dd76abd7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>const bool</type>
        <definition>const bool prism::memory::operator==</definition>
        <argsstring>(const U *p1, const SharedPointer&lt; U &gt; &amp;p2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const U *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classprism_1_1memory_1_1_shared_pointer" kindref="compound">SharedPointer</ref>&lt; U &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the raw pointer p1 and the managed pointer of p2 point to the same data, false otherwise. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/memory/SharedPointer.h" line="233" column="1" bodyfile="inc/memory/SharedPointer.h" bodystart="233" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/memory/ReferenceCounter.h" line="13" column="1"/>
  </compounddef>
</doxygen>
